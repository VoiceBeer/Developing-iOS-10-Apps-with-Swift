1
00:00:00,401 --> 00:00:04,502
本字幕由志愿者义务贡献，采用许可协议
知识共享 署名-非商业性使用-相同方式共享 3.0 美国

2
00:00:04,571 --> 00:00:07,372
Stanford University.
斯坦福大学

3
00:00:07,441 --> 00:00:11,075
>> All right, well, welcome to Stanford CS193P,
欢迎参加 2017 年冬季学期斯坦福

4
00:00:11,144 --> 00:00:15,714
that's Developing Applications for iOS, winter of 2017.
CS193P 课程，iOS 应用程序开发

5
00:00:15,782 --> 00:00:20,785
So today, our topic is to talk about custom views, okay,
今天我们要讲的是自定义视图

6
00:00:20,854 --> 00:00:25,123
specifically the drawing side of having custom views.
特别是在这些视图中绘制内容

7
00:00:25,192 --> 00:00:28,193
And this is gonna be a more typical lecture than last
以后上课的形式都和今天差不多

8
00:00:28,262 --> 00:00:30,762
time because I'll be doing some slides and
上次全是幻灯片是因为

9
00:00:30,831 --> 00:00:32,964
explaining the concepts to you, and
我全在讲理论知识

10
00:00:33,033 --> 00:00:36,301
then I'll go into a demo that shows you how we do it all.
现在我们是要实际运用

11
00:00:36,370 --> 00:00:39,104
So what is a view?
那什么是 view, 视图呢？

12
00:00:39,173 --> 00:00:42,540
A view is a subclass of UIView,
视图继承 UIView

13
00:00:42,609 --> 00:00:45,643
which is in UIKit in iOS.
UIView 属于 iOS UIKit 的一部分

14
00:00:45,712 --> 00:00:48,313
And all it does is carve out or
它的作用是“挖出”，也就是

15
00:00:48,382 --> 00:00:51,883
represent a rectangular area on screen.
代表屏幕上一个长方形的区域

16
00:00:51,952 --> 00:00:55,019
And that rectangular area defines a coordinate space
以这个长方形构成一个坐标系

17
00:00:55,088 --> 00:00:57,990
that we're gonna draw in and that we're gonna get
这就是我们可以绘制的区域

18
00:00:58,058 --> 00:01:00,124
multi-touch events like pinches and
这个区域也会接受多点触控

19
00:01:00,193 --> 00:01:01,660
swipes and all that stuff.
比如捏合，轻扫事件等

20
00:01:01,728 --> 00:01:03,095
So today,
于是今天

21
00:01:03,163 --> 00:01:06,131
I'm just gonna focus on the drawing side of that all and
我先只会专门讲如何绘制

22
00:01:06,199 --> 00:01:09,268
then we'll start talking about the gestures on Wednesday.
手势的处理我们留到星期三

23
00:01:10,537 --> 00:01:14,439
So these views, these little rectangle areas
这些视图，这些长方形的区域

24
00:01:14,508 --> 00:01:17,542
are put on screen in this hierarchical way.
是组织为层级之后显示在屏幕上的

25
00:01:17,611 --> 00:01:20,779
And that just means that the views have subviews
这意味着视图当中可以有

26
00:01:20,847 --> 00:01:21,913
inside of them.
多个子视图，subview

27
00:01:21,982 --> 00:01:25,450
Now any given view can only have one superview,
但只可能有一个父视图，superview

28
00:01:25,519 --> 00:01:27,185
that's the view that it's contained in.
也就是包含它的那个视图

29
00:01:27,254 --> 00:01:29,054
But it can have any number of subviews,
但是子视图可以有很多个

30
00:01:29,123 --> 00:01:30,689
so views made out of it.
所有它包含的视图都算

31
00:01:30,758 --> 00:01:33,324
So for example, on the calculator, we had for
拿计算器举例子

32
00:01:33,393 --> 00:01:35,493
example, stack view, okay.
我们有 StackView

33
00:01:35,562 --> 00:01:37,195
It had a lot of subviews,
其中有很多子视图

34
00:01:37,264 --> 00:01:38,897
all the buttons that we stacked in it.
也就是被我们叠起来的那些按钮

35
00:01:38,965 --> 00:01:41,400
In fact, some of the stack views had other stack views as
事实上，还有的 StackView 的子视图

36
00:01:41,468 --> 00:01:42,067
their subviews.
也是 StackView

37
00:01:42,135 --> 00:01:44,302
And then those stack views had more subviews,
每个子视图 StackView 又有更多的子视图

38
00:01:44,371 --> 00:01:45,771
which were buttons or whatever, okay.
也就是那些按钮一类的

39
00:01:45,839 --> 00:01:49,674
So that's how we build our UI is this hierarchical
所以 UI 是通过这种层级结构

40
00:01:49,743 --> 00:01:52,077
collection of these rectangular areas.
通过一层层的长方形视图构成的

41
00:01:52,145 --> 00:01:56,014
Now, at the very, very, very top there's a special UIView
在这个结构的最顶层，有一个特殊的 UIView

42
00:01:56,083 --> 00:01:59,751
called UIWindow class, we don't deal with that in iOS.
它是一个 UIWindow，虽然 iOS 里不常用

43
00:01:59,820 --> 00:02:03,021
In fact, the only time you would ever do anything with
事实上唯一需要用到 UIWindow 的情况

44
00:02:03,090 --> 00:02:06,491
the UIWindow is if you were building an app that maybe
是你需要编写一个能投影

45
00:02:06,560 --> 00:02:08,193
projected to a projector.
到投影仪的程序

46
00:02:08,261 --> 00:02:10,328
So that you had two screens, your device and
这种情况下你有两个屏幕——你的设备

47
00:02:10,397 --> 00:02:11,963
then maybe some external projector or
和那个投影仪

48
00:02:12,032 --> 00:02:14,199
something, then you might care about UIWindow.
这个时候你就需要考虑用 UIWindow

49
00:02:14,268 --> 00:02:17,069
But otherwise, it's all about UIView, okay?
但其他情况下 iOS 都只会用到 UIView

50
00:02:17,137 --> 00:02:19,871
All of our arrangement of the screen is all about how we
所有屏幕上的布局都是

51
00:02:19,940 --> 00:02:22,574
arrange the UIViews.
组织这些 UIView

52
00:02:22,642 --> 00:02:25,444
Now this hierarchy, okay, these rectangular areas inside
一般来说，设计这个层级结构

53
00:02:25,512 --> 00:02:28,680
of rectangular areas, is almost always built
这一层套一层的长方形区域

54
00:02:28,749 --> 00:02:31,316
in Interface Builder, inside Xcode, okay?
是通过 Xcode 的 Interface Builder

55
00:02:31,385 --> 00:02:32,817
That's how we built the stack view stuff.
还记得我们是怎么创建 StackView 的吗？

56
00:02:32,886 --> 00:02:34,752
We dragged out a bunch of buttons and
我们把一堆按钮拖到界面里

57
00:02:34,821 --> 00:02:35,920
then we selected them and said,
选中之后然后选择

58
00:02:35,989 --> 00:02:38,890
"Embed in Stack View." Well, that wrapped it in there.
"Embed in StackView"，封装到 StackView

59
00:02:38,959 --> 00:02:42,094
But we can also build that hierarchy by dragging views
同理，我们也能够把视图

60
00:02:42,162 --> 00:02:43,929
out of the utilities,
从右下角的工具区里拖出来

61
00:02:43,997 --> 00:02:47,132
bottom of the utilities window there, inside other views.
放到其他的视图中

62
00:02:47,200 --> 00:02:48,132
So you can drag,
所以你可以拖拽

63
00:02:48,201 --> 00:02:51,703
do it by dragging-dropping inside of other views.
拖拽然后放进其他视图里

64
00:02:51,772 --> 00:02:53,338
It is possible to do it in code but
虽然我们也可以写代码实现

65
00:02:53,407 --> 00:02:55,207
usually we're doing it graphically.
不过通常我们都是用 IB 完成

66
00:02:55,276 --> 00:02:56,375
If you're doing it in code,
如果你要通过代码实现

67
00:02:56,443 --> 00:03:00,912
the two main methods involved in building and
有两个方法是你肯定要用到的

68
00:03:00,981 --> 00:03:05,050
destroying this hierarchy, are addSubview, okay,
一个是 addSubview

69
00:03:05,119 --> 00:03:07,418
addSubview, takes a view as an argument.
接受一个 UIView 作为参数

70
00:03:07,487 --> 00:03:11,489
You send it to the "soon-to-be" superview of that
然后把它交给“准”父视图

71
00:03:11,558 --> 00:03:12,708
In other words, you ask another view,
也就是你告诉另一个视图

72
00:03:12,709 --> 00:03:13,859
view.
告诉它说

73
00:03:13,927 --> 00:03:16,928
please add this other view as subview of yourself.
请把这个视图收为你的子视图

74
00:03:16,996 --> 00:03:19,864
Now when you're doing the opposite, taking some view out
反之，如果你要从层级中踢出视图

75
00:03:19,933 --> 00:03:22,467
of the hierarchy, you don't send it to the superview.
你不用通知它的父视图

76
00:03:22,536 --> 00:03:24,436
You send it to the actual view itself,
你告诉你要移除的视图

77
00:03:24,505 --> 00:03:27,305
basically remove yourself from this view hierarchy.
你自己把自己踢出去吧

78
00:03:27,374 --> 00:03:29,507
So you send removeFromSuperview
让你想移除的视图

79
00:03:29,576 --> 00:03:31,977
to the actual view you want removed.
调用 removeFromSuperview 方法

80
00:03:33,280 --> 00:03:35,347
Now where does this hierarchy start?
这个层级结构从哪里开始的呢？

81
00:03:35,415 --> 00:03:37,048
I guess you could say it starts in UIWindow.
准确的说是那个 UIWindow

82
00:03:37,117 --> 00:03:39,517
But for our purposes, we don't even pay attention to that.
但是我们并不需要太在意它

83
00:03:39,586 --> 00:03:42,054
It starts at the top level view
所以我们把 Interface Builder 里

84
00:03:42,122 --> 00:03:44,956
in that scene in Interface Builder.
显示的最顶层视图当作结构的最顶层

85
00:03:45,025 --> 00:03:47,225
The scene that's controlled by our view controller, right?
也就是每个视图控制器控制的场景

86
00:03:47,294 --> 00:03:49,527
That rectangular area that we work in.
提供给我们布局的那个长方形区域

87
00:03:49,596 --> 00:03:50,261
There's a top,
就当它作为最顶层

88
00:03:50,330 --> 00:03:54,499
top level view that covers the whole space up there.
最顶层的视图覆盖了所有可用的区域

89
00:03:54,567 --> 00:03:56,701
And there is an important instance variable,
有个重要的属性

90
00:03:56,770 --> 00:03:59,771
property, in UIViewController.
UIViewController 和

91
00:03:59,840 --> 00:04:02,907
Okay, so all subclasses of UIViewController get
UIViewController 的子类

92
00:04:02,976 --> 00:04:03,842
this property.
都有这个属性

93
00:04:03,910 --> 00:04:07,946
It's called view and it's a UIView and a top level view.
叫做 view，也就是最顶层的这个 UIView

94
00:04:08,015 --> 00:04:12,084
And it's very important to understand that in an MVC,
这是很重要的一点，对于 MVC 而言

95
00:04:12,152 --> 00:04:15,520
the controller has this, always has this var which
控制器需要有通过这个变量

96
00:04:15,589 --> 00:04:20,459
points to the very top of that view hierarchy in its scene.
指向其控制场景的视图层级中的最顶层

97
00:04:22,429 --> 00:04:25,430
This top level view is important because for example,
这个最顶层的视图很重要，因为比如

98
00:04:25,499 --> 00:04:28,599
when you rotate, it's the thing whose bounds changes,
你旋转之后，最顶层的视图的边界

99
00:04:28,668 --> 00:04:29,801
that top level view.
整个都跟着变了

100
00:04:29,870 --> 00:04:32,336
And you're gonna learn a little later that when
之后你会学到

101
00:04:32,405 --> 00:04:35,606
the bounds of a view changes, there's a mechanism for
当一个视图的边界发生改变之后

102
00:04:35,675 --> 00:04:39,043
offering all of its subviews an opportunity to change.
会有一个给所有子视图更新的机制

103
00:04:39,112 --> 00:04:40,712
So that's why when we rotate device,
当我们旋转之后

104
00:04:40,781 --> 00:04:43,281
that top level view changes from being tall and
最顶层的视图从瘦长型

105
00:04:43,350 --> 00:04:47,085
thin to being wide and less tall.
变成了矮胖型

106
00:04:47,154 --> 00:04:49,654
And that causes all those stack views and
这就会导致所有那些 StackView

107
00:04:49,723 --> 00:04:52,123
everything else to start getting resized as well,
所有的子视图跟着改变形状

108
00:04:52,192 --> 00:04:56,361
because they're all subviews of this top level view, okay?
因为它们是最顶层视图的子视图

109
00:04:56,430 --> 00:04:59,497
If you were going to add views to the view hierarchy
如果你要添加一个视图

110
00:04:59,566 --> 00:05:01,866
programmatically rather than dragging and
通过代码而不是拖拽实现

111
00:05:01,935 --> 00:05:04,502
dropping them, then you would need this view because it's
你需要用到这个视图，因为它是

112
00:05:04,571 --> 00:05:06,204
the top of the entire view hierarchy.
整个视图层的顶层

113
00:05:06,273 --> 00:05:07,606
And you would kinda work your way down
你可能会想知道你需要

114
00:05:07,674 --> 00:05:09,907
to find out where you want to put that view.
把那个视图放在哪

115
00:05:09,976 --> 00:05:12,410
But we don't otherwise actually look at this view
但其实我们不需要知道把它放哪

116
00:05:12,479 --> 00:05:14,846
much because we usually have outlets, rights?
因为我们有出口，对吧？

117
00:05:14,915 --> 00:05:17,982
IBOutlets--like the display that points to the label--that
比如指向标签控件的那个 display 变量就是个 IBOutlet（出口）

118
00:05:18,051 --> 00:05:19,484
gives us access to that label.
这个 IBOutlet 能让我们去修改那个标签

119
00:05:19,552 --> 00:05:20,451
That's all we want, so
这就是我想实现的，那么

120
00:05:20,520 --> 00:05:22,988
we don't have to go looking at the top level view and
我们不再需要从顶级视图开始

121
00:05:23,056 --> 00:05:26,290
looking all down the views, okay?
一个一个地去找了，对吧？

122
00:05:26,359 --> 00:05:28,059
So this is important to know about but
那么这就是我们重点需要知道的

123
00:05:28,128 --> 00:05:31,896
surprisingly you don't access it that much, okay.
但好在我们不需要过多的去使用它，好吧

124
00:05:31,965 --> 00:05:33,764
This view is automatically hooked up for you in
这个视图会自动连接到

125
00:05:33,833 --> 00:05:35,967
Interface Builder when you drag out a View Controller.
你拖出到 Interface Builder 的视图控制器

126
00:05:36,035 --> 00:05:38,002
It's just all magically hooked up,
就这么神奇的连接上了

127
00:05:38,071 --> 00:05:40,071
you don't have to worry about that.
你完全不需要担心

128
00:05:40,140 --> 00:05:43,241
Okay, let's talk about initialization of the UIView.
好了，接下来我们将讨论初始化 UIView

129
00:05:43,309 --> 00:05:46,378
As usual, when you saw the lecture from last time,
就如你从上节课所看到的

130
00:05:46,446 --> 00:05:49,981
you probably realize, whoa, initialization has a lot of
你可能会觉得，初始化很麻烦

131
00:05:50,049 --> 00:05:54,152
caveats when you're talking about initializing a class,
在初始化的时候有很多条条框框

132
00:05:54,220 --> 00:05:55,170
Remember all those rules I was going through?
还记得我讲过的那些规则吗？

133
00:05:55,171 --> 00:05:56,121
right?
是吧？

134
00:05:56,189 --> 00:06:00,224
Required convenience and its inheritance, all this stuff.
必要（required）、便利（convenience）、继承构造器

135
00:06:00,293 --> 00:06:02,960
So we try to avoid initializers generally as much
所以我们会避免去接触这些

136
00:06:03,029 --> 00:06:05,963
as we can by doing all the things I talked
尽可能的通过我讲的其他方法

137
00:06:06,032 --> 00:06:07,932
about on Wednesday, like setting things equal or
比如我星期三讲的，比如直接赋值

138
00:06:08,001 --> 00:06:10,501
even using lazy or something like that.
甚至是使用延迟存储属性

139
00:06:10,570 --> 00:06:12,170
But if you can't avoid it,
但如果还是无法避免的话

140
00:06:12,239 --> 00:06:14,873
UIView has an interesting initializer situation.
UIView 的构造过程是很有趣的

141
00:06:14,942 --> 00:06:19,343
It has two initializers that you have to deal with.
你要实现它的两个构造器

142
00:06:19,412 --> 00:06:22,513
Okay, one of them, init, with the frame is the argument, is
其中一个是接受 frame 作为参数的

143
00:06:22,582 --> 00:06:25,549
the one that you would call if you're trying to create a view
你在代码中就是通过这个方法构造视图

144
00:06:25,618 --> 00:06:30,155
in code, which you'll probably never do in this class, okay?
虽然我们这节课几乎不会用到

145
00:06:30,223 --> 00:06:31,555
Because you're always gonna use or
因为你们一般都是使用

146
00:06:31,624 --> 00:06:33,425
do it in Interface Builder with Xcode.
Xcode 里的 Interface Builder

147
00:06:33,494 --> 00:06:37,261
But, so that's the kind of in-code one.
但是代码里就是用这个

148
00:06:37,330 --> 00:06:40,097
And init with this coder thing,
另外一个通过 coder 构造的

149
00:06:40,166 --> 00:06:41,566
which I'll talk about right at the end of class,
我留到这节课最后讲

150
00:06:41,635 --> 00:06:44,302
but it's not important to know early on.
你们不用着急了解这个

151
00:06:44,371 --> 00:06:47,371
That's the init that gets called when your stuff come
调用这个构造器的是那些

152
00:06:47,440 --> 00:06:48,874
outs of Interface Builder, right?
在 Interface Builder 里的

153
00:06:48,942 --> 00:06:52,377
When it comes from, when you built in Xcode.
也就是你从 Xcode 里拖出来的那些

154
00:06:52,445 --> 00:06:54,312
All the stuff that you're building in Interface Builder
所有那些 Interface Builder 里构建的

155
00:06:54,381 --> 00:06:56,214
essentially gets coded,
其实都会被编码

156
00:06:56,283 --> 00:06:58,383
that's what this coder business is about.
这就是 coder 这个转码器作为参数的原因

157
00:06:58,451 --> 00:07:02,553
Gets coded into an XML file, kind of freeze-dried.
UI 以 XML 文件的格式存储，就这样被定住了

158
00:07:02,622 --> 00:07:05,323
And then when you run your program, that XML file gets
当你运行程序的时候，那个 XML 文件

159
00:07:05,392 --> 00:07:07,591
loaded in and it's kind of the instructions for
作为指令加载

160
00:07:07,660 --> 00:07:10,929
how to create all those objects, okay?
指导如何创建那些对象

161
00:07:10,998 --> 00:07:12,864
And init with coder is the initializer it uses
使用的就是 init(coder:) 这个构造器

162
00:07:12,932 --> 00:07:14,232
to recreate the view.
来创建视图

163
00:07:14,301 --> 00:07:17,402
So if you have any code that needs to go in an initializer,
如果你有需要放到构造器里的代码

164
00:07:17,471 --> 00:07:19,804
like you need to initialize some var in your UIView,
比如说初始化 UIView 里的一个变量

165
00:07:19,873 --> 00:07:21,806
you have to do it like this.
你需要这样做

166
00:07:21,875 --> 00:07:23,741
Override both of these inits,
两个构造器都要重写（override）

167
00:07:23,810 --> 00:07:26,911
one of them is a required init, the coder one.
init(coder:) 这个是必要的

168
00:07:26,980 --> 00:07:29,780
And we create some other method like this green setup
我们一般是用像这个绿色的 setup

169
00:07:29,849 --> 00:07:30,615
method I have.
这样的方法

170
00:07:30,683 --> 00:07:33,118
And just call that method from both of them.
两个构造器里都调用这个方法

171
00:07:33,186 --> 00:07:35,653
That way you're guaranteed that whether your custom view
这样就能保证， 无论你自己的视图

172
00:07:35,722 --> 00:07:38,156
is created in code or created in Interface Builder,
是通过代码还是 Interface Builder 构造

173
00:07:38,224 --> 00:07:43,694
it will get initialized properly.
都能够正确地完成构造

174
00:07:43,763 --> 00:07:46,697
If you have vars that have to be initialized, you may not be
如果你有需要初始化的变量

175
00:07:46,766 --> 00:07:49,501
able to use this mechanism of course because you can't
你可能没法使用这种办法，因为你不能

176
00:07:49,569 --> 00:07:52,337
call methods in yourself until you're initialized.
在完成构造之前调用你自己的函数

177
00:07:52,406 --> 00:07:55,706
So you might have to have that var initialization be
所以你可能需要把初始化变量的部分

178
00:07:55,775 --> 00:07:58,142
somewhat duplicated there.
在两个构造器中重复写一遍

179
00:07:58,211 --> 00:08:00,978
There's another alternative to initialization though and this
这里还有一种另外的初始化方法

180
00:08:01,047 --> 00:08:03,514
is for any other object that comes out of Interface Builder
适用于所有通过 Interface Builder 构造的

181
00:08:03,583 --> 00:08:05,583
which is called awakeFromNib.
叫做 awakeFromNib

182
00:08:05,652 --> 00:08:07,018
Okay, awakeFromNib.
那这个 awakeFromNib

183
00:08:07,087 --> 00:08:09,554
This is sent to every single object that ever comes out
每一个对象都会调用

184
00:08:09,623 --> 00:08:12,491
of Interface Builder file, okay, that you edit
只要是通过 Interface Builder 构造的都是

185
00:08:12,559 --> 00:08:14,125
in the story board there including views and
包括你 Storyboard 里编辑的那些视图

186
00:08:14,194 --> 00:08:15,426
your View Controller for that matter.
你的视图控制器那些

187
00:08:15,495 --> 00:08:19,664
And so you can do some initialization here but it doesn't
因此虽然这不是构造器，但你可以进行些初始化工作

188
00:08:19,733 --> 00:08:22,634
count as the "Your object must be completely initialized."
因此像“你必须完全初始化才能调用函数”

189
00:08:22,702 --> 00:08:26,271
Those restrictions are not satisfied by this.
这些约束是不能满足的

190
00:08:26,339 --> 00:08:28,940
But still you can put code in there, you get, get going.
但是你还是可以放部分初始化的代码在这里的

191
00:08:29,009 --> 00:08:30,475
And we're gonna learn all kinds of ways to do
我们还会学到各种各样的方法

192
00:08:30,544 --> 00:08:32,944
initialization throughout our system down the road,
我们之后会慢慢了解这些构造方法

193
00:08:33,013 --> 00:08:35,514
but that's basically how you initialize UIViews.
以上就是构造 UIView 的方法

194
00:08:37,250 --> 00:08:40,085
Okay so we're gonna talk now about UIView
我们接下来讲 UIView

195
00:08:40,153 --> 00:08:43,287
as this rectangular area in which we're gonna draw.
作为一个矩形画布的用法

196
00:08:43,356 --> 00:08:45,256
And so to do that we need talk about some types.
在讲那个之前需要先了解几个其他的类型

197
00:08:45,324 --> 00:08:47,492
They're some very important types that you need to know.
你们需要掌握几个非常重要的类型

198
00:08:47,561 --> 00:08:49,627
One of them is CGFloat.
其中一个是 CGFloat

199
00:08:49,696 --> 00:08:51,796
So CGFloat is a floating point value.
CGFloat 代表一个浮点数

200
00:08:51,865 --> 00:08:54,665
All of your coordinates that you're gonna be drawing in
所以你在坐标系里绘制的坐标

201
00:08:54,734 --> 00:08:57,668
are all floating point values, but they're not doubles,
都是这些浮点数构成的，不过不是 Double

202
00:08:57,737 --> 00:09:00,238
they're not floats, they're CGFloats.
不是 Float，而是 CGFloat

203
00:09:00,307 --> 00:09:01,206
So this is a type,
所以这是一个类型

204
00:09:01,274 --> 00:09:04,142
a real type that you have to use all the time
你们要使用的就是这个类型

205
00:09:04,210 --> 00:09:06,378
when you're doing anything with the drawing, okay?
来完成所有的绘制

206
00:09:07,347 --> 00:09:08,947
CG stands for Core Graphics,
CG 代表的是 Core Graphics，核心图形库

207
00:09:09,016 --> 00:09:11,916
this is the "graphics float" right here, okay?
所以 CGFloat 是 “绘图用浮点数”

208
00:09:11,985 --> 00:09:15,553
There's also a CGPoint which is just a struct with two
还有一个叫 CGPoint 的结构体

209
00:09:15,622 --> 00:09:18,956
things in it, x and y, they're both CGFloats, CGPoint
由 x 和 y 两个 CGFloat 组成

210
00:09:19,025 --> 00:09:21,993
represents a point in your coordinate system somewhere.
CGPoint 代表坐标系里某处的一个点

211
00:09:22,061 --> 00:09:24,395
Again, floating point coordinates.
同样的，用浮点数表示坐标

212
00:09:24,464 --> 00:09:27,465
There's also CGSize, which represents an extent.
还有 CGSize，代表大小

213
00:09:27,534 --> 00:09:29,134
You know, a width and a height, okay?
也就是宽和高

214
00:09:29,202 --> 00:09:32,370
Only, it's just the struct, with two CGFloats, width and
所以 CGSize 也是一个 CGFloat 组成的结构体

215
00:09:32,438 --> 00:09:33,805
height, simple.
width 和 height

216
00:09:33,874 --> 00:09:36,775
And there's CGRect, of course, which is a rectangle.
还有 CGRect，理所当然的代表一个矩形

217
00:09:36,843 --> 00:09:39,844
It's a struct that has an origin, which is CGPoint, and
这是一个结构体，由一个 CGPoint 作为 origin，原点

218
00:09:39,913 --> 00:09:41,445
an extent, which is a size.
和一个 CGSize 表示大小

219
00:09:41,514 --> 00:09:44,282
So a rectangle represents a size, okay?
这个矩形代表的大小

220
00:09:44,350 --> 00:09:47,585
So creating a CGRect--there's actually quite a few
所以构造 CGRect 有很多方法

221
00:09:47,654 --> 00:09:48,953
initializers for it.
有很多的构造器

222
00:09:49,021 --> 00:09:50,087
You can create an origin and size,
可以通过原点和大小

223
00:09:50,156 --> 00:09:52,490
you can do an x y with height, things like that.
或者使用 横坐标，纵坐标，宽，高

224
00:09:52,559 --> 00:09:54,792
And CGRect also has a lot of really cool,
同时，CGRect 还有很多实用

225
00:09:54,861 --> 00:09:59,630
little convenience vars and funcs and thing like that.
方便的属性和方法，比如

226
00:09:59,699 --> 00:10:01,399
maxY, midY, those'll tell you thing like where's the left
maxY，midY，或者是告诉你最左边位置的

227
00:10:01,400 --> 00:10:03,100
Like minX,
minX

228
00:10:03,169 --> 00:10:06,370
edge of your rect to the top to the left or the bottom.
有这些告诉你最顶部，左边，下面位置的属性

229
00:10:06,439 --> 00:10:08,239
The middle points, etc.
或者是中点的位置

230
00:10:08,308 --> 00:10:11,976
There's also nice functions like intersects other rect
还有些方法，比如 intersects(CGRect)

231
00:10:12,044 --> 00:10:14,846
will return whether the two rectangles cross over.
返回两个 CGRect 是否有交集

232
00:10:14,915 --> 00:10:18,182
And there's even contains whether a point
或者是 contains(CGPoint)

233
00:10:18,251 --> 00:10:20,351
is inside the rectangle, etc.
判断一个点是否在矩形中

234
00:10:20,420 --> 00:10:22,253
So there's quite a few of these.
这样的还有不少

235
00:10:22,322 --> 00:10:23,587
I can't put them all on the slide, so
我没法把全都列举出来

236
00:10:23,656 --> 00:10:27,024
you're gonna wanna familiarize yourselves with CGRect.
你应该尽快熟悉 CGRect

237
00:10:27,093 --> 00:10:28,827
Because it probably has a lot of things in there that
因为 CGRect 包含了很多东西

238
00:10:28,895 --> 00:10:31,162
you would otherwise be writing your own code to do.
可以省去你自己写代码实现的麻烦

239
00:10:32,465 --> 00:10:34,164
Okay, so now that we have those types,
好，现在我们已经了解了这些类型

240
00:10:34,233 --> 00:10:36,734
those four types, we can start talking about this coordinate
以上提到的四种类型，我们可以开始讲

241
00:10:36,803 --> 00:10:39,104
system that we're gonna be doing our drawing in.
我们绘图的坐标系了

242
00:10:39,172 --> 00:10:40,805
Now, the most important thing to understand,
现在你们最需要记住的就是

243
00:10:40,874 --> 00:10:43,808
the simplest thing, is that the origin of this coordinate
很简单，坐标系的原点

244
00:10:43,877 --> 00:10:47,211
system is in the upper left of the screen.
在屏幕的左上角

245
00:10:47,280 --> 00:10:50,481
It's not Cartesian coordinates which the origin would be in
这和笛卡尔坐标系不同，

246
00:10:50,550 --> 00:10:52,716
the lower left of the screen because in Cartesian
原点并不在屏幕的左下角

247
00:10:52,785 --> 00:10:54,986
coordinates increasing y means up, but
因为在笛卡尔坐标系中增加 y 代表向上

248
00:10:55,054 --> 00:10:57,255
in this coordinate system increasing y means going down,
但是 UIKit 中增加 y 代表向下

249
00:10:57,323 --> 00:10:59,156
down the screen, okay?
更靠屏幕下方

250
00:10:59,225 --> 00:11:00,625
So very important to understand that.
所以这是非常重要的

251
00:11:00,693 --> 00:11:06,063
So you can see that point I have up there, 500,35 that's
你看我这里的这个点，(500, 35)

252
00:11:06,132 --> 00:11:11,302
500 over and 35 down from the origin upper left, okay?
代表向右 500，向下 35

253
00:11:11,371 --> 00:11:15,874
Now, the units in here that we're drawing are points.
在绘图时我们用的单位是点

254
00:11:15,942 --> 00:11:19,043
Okay, be very careful that you understand the unit
要注意理解这里的单位

255
00:11:19,112 --> 00:11:21,245
terminology here, okay?
这个用词，要注意了

256
00:11:21,314 --> 00:11:23,281
It's in points, not pixels.
是点，不是像素

257
00:11:23,349 --> 00:11:26,784
A pixel is like the smallest possible little light
一个像素是指最小的能发光的单位

258
00:11:26,853 --> 00:11:29,120
that can be turned on on your screen.
屏幕通过让像素发光来显示内容

259
00:11:29,189 --> 00:11:33,023
Okay, now some devices have a lot of pixels
在有些设备上，许多个像素一起

260
00:11:33,092 --> 00:11:36,394
per point--they're very dense.
用来显示一个点——非常密集

261
00:11:36,462 --> 00:11:39,030
And that's really great, because if you're drawing
这是很好的，因为如果你绘制

262
00:11:39,098 --> 00:11:41,899
smooth curves--like fonts are just
一条平滑的曲线，比如显示文字

263
00:11:41,968 --> 00:11:44,568
smooth curves being drawn--you don't get jaggy edges,
绘制这种线条，就不会产生锯齿

264
00:11:44,637 --> 00:11:47,204
because there's so many tiny little points, okay?
要保证平滑就需要很多的点

265
00:11:47,273 --> 00:11:50,308
But we can't make it, so that we draw in the pixel space,
但屏幕上并没有那么多点，所以需要靠像素

266
00:11:50,377 --> 00:11:54,111
otherwise, on a very dense pixel screen,
因此，在一个分辨率高的屏幕上

267
00:11:54,180 --> 00:11:55,980
our image would be really small.
图片会显得很小

268
00:11:56,049 --> 00:11:57,815
And then, in an undense one, it'd be really big,
在分辨率偏低的屏幕上会显得很大

269
00:11:57,883 --> 00:11:59,217
because the pixels are really big.
因为每个像素很大

270
00:11:59,285 --> 00:12:01,419
So we instead of drawing in pixels,
所以不用像素绘制

271
00:12:01,488 --> 00:12:03,154
we draw in points, okay?
而是用点为单位

272
00:12:03,222 --> 00:12:05,757
This is the same point by the way that is like the point
这里的提到的点和字号

273
00:12:05,825 --> 00:12:06,558
size of a font.
是一个概念

274
00:12:06,626 --> 00:12:11,162
A 12 point font, same word there, same point, okay?
12 号（point）字体也指的是这个点（point）

275
00:12:12,932 --> 00:12:16,601
So, you can find out though how many pixels there are per
如果你想要知道每个点里有多少个像素

276
00:12:16,669 --> 00:12:19,304
point, in other words how high resolution your screen is,
也就是屏幕分辨率有多高

277
00:12:19,372 --> 00:12:23,508
with this var in UIView called contentScaleFactor.
可以通过 UIView 里 contentScaleFactor 这个属性

278
00:12:23,576 --> 00:12:25,710
It's a CGFloat, it's either gonna be one, two, or
这是个 CGFloat，数值可能是 1，2 或 3

279
00:12:25,778 --> 00:12:27,044
three currently.
就目前来看是这样

280
00:12:27,113 --> 00:12:29,480
Like, the iPhone 7 Plus is three.
比如 iPhone 7 Plus 就是 3

281
00:12:29,549 --> 00:12:32,216
Three pixels per point in each direction.
每个点在每个方向有三个像素点

282
00:12:32,284 --> 00:12:37,088
And the older like iPhone 4s maybe?
像老一点的比如 iPhone 4s

283
00:12:37,156 --> 00:12:39,457
Maybe all the way back to the 4 would be one.
或者是 iPhone 4 就会是一个像素点

284
00:12:39,525 --> 00:12:42,193
Okay, some of the older iPads would be one.
那些老一些的 iPad 也会是一个

285
00:12:42,262 --> 00:12:44,495
The newer iPads would be two.
新一些的应该是二个像素点

286
00:12:44,563 --> 00:12:45,863
So, If you're doing anything
如果你

287
00:12:45,864 --> 00:12:47,164
where you have to pay
需要关心

288
00:12:47,233 --> 00:12:49,033
attention to the number of pixels of points,
每个点里有多少个像素

289
00:12:49,101 --> 00:12:50,167
this is what you need.
这就是你需要的

290
00:12:50,236 --> 00:12:52,770
Now the great thing is, most of the time you don't care
不过好消息是你们大多数时候并不需要

291
00:12:52,838 --> 00:12:55,773
because when you're using iOS to draw with a font,
因为如果你让 iOS 系统绘制文字

292
00:12:55,841 --> 00:12:58,642
it's automatically gonna do super smooth turns, and
会自动用平滑的线条显示出来

293
00:12:58,711 --> 00:13:00,978
you don't even have to know what the scale factor is.
你根本不用在意缩放比是多少

294
00:13:01,047 --> 00:13:02,846
Even if you're just drawing an arc,
甚至即使你只是画一个圆弧

295
00:13:02,915 --> 00:13:06,083
it'll make sure you do as little jaggies as possible.
它也会尽量减少锯齿的数量

296
00:13:06,152 --> 00:13:07,785
So, you rarely have to know this.
所以你基本不需要知道这个

297
00:13:07,853 --> 00:13:09,753
But actually, wake up.
但其实，睡着的注意了

298
00:13:09,822 --> 00:13:11,355
You do need to know for assignment three, okay?
你需要在第三个作业中用到

299
00:13:11,424 --> 00:13:13,857
So assignment three, you will have to know this.
所以你在作业三中会用到

300
00:13:13,926 --> 00:13:17,027
Alright, now.
好的，现在

301
00:13:17,096 --> 00:13:21,965
The most important var in all of UIView is this one: bounds.
所有 UIView 里做重要的属性就是这个了：bounds

302
00:13:22,034 --> 00:13:25,135
And even in that really important var,
在代表边界的这个变量中

303
00:13:25,204 --> 00:13:29,273
really what you care about is the size.
你最需要的是它的 size，大小

304
00:13:29,342 --> 00:13:32,576
This is, in your drawing coordinate system,
这是在整个坐标系中

305
00:13:32,645 --> 00:13:34,378
the space you have to draw in.
你能够绘制内容的部分

306
00:13:34,447 --> 00:13:37,515
This is basically the size of your view in your own drawing
这个代表了在绘制的坐标系里

307
00:13:37,584 --> 00:13:38,683
coordinate system.
你视图的大小

308
00:13:38,752 --> 00:13:40,818
So any time you're doing any drawing and
所以你在绘制的时候

309
00:13:40,887 --> 00:13:43,688
you wanna draw something that's as wide as your view,
如果想要画的和视图一样宽

310
00:13:43,757 --> 00:13:46,223
you're gonna use bounds.size.width here.
就用 bounds.size.width

311
00:13:46,292 --> 00:13:49,560
And you're almost always gonna have your bounds' origin be
大部分时候 bounds 的 origin（原点）都会在

312
00:13:49,628 --> 00:13:52,897
(0, 0) so if you want put something in upper left you're
(0, 0)。所以如果你想画到左上角

313
00:13:52,966 --> 00:13:56,200
gonna put it at (0, 0) or close to (0, 0).
那就放到 (0，0) 或者接近的地方

314
00:13:56,268 --> 00:13:57,334
So this rect, bounds,
所以 bounds 这个 CGRect

315
00:13:57,403 --> 00:13:59,336
is describing the area have to draw in.
代表的就是可绘制的区域

316
00:13:59,405 --> 00:14:01,839
Now it's important because you obviously want to,
这是很重要的，因为你肯定会想让

317
00:14:01,908 --> 00:14:05,142
depending on your size, draw yourself appropriately.
不同屏幕大小都能正确显示绘制的内容

318
00:14:05,211 --> 00:14:07,812
And it's also important because there are two other
另外一个原因是，还有两个属性

319
00:14:07,880 --> 00:14:12,016
vars that often get confused by students with bounds, and
学生经常和 bounds 搞混

320
00:14:12,085 --> 00:14:16,920
which are quite different: that is frame and center.
其实差别还挺大的：frame 和 center

321
00:14:16,989 --> 00:14:20,825
So frame and center have nothing to do
frame 和 center 对于

322
00:14:20,894 --> 00:14:23,994
with where you're drawing, that's bounds.
绘图来说毫无干系，只要 bounds

323
00:14:24,063 --> 00:14:27,665
Frame and center is where you are in your super view.
frame 和 center 是告诉你在父视图中的位置

324
00:14:29,402 --> 00:14:32,136
So here's a picture of that frame and center.
这是 frame 和 center 的描述

325
00:14:32,205 --> 00:14:35,473
So center is where your center is in your superview's
center，是指你的中心在父视图

326
00:14:35,542 --> 00:14:38,309
coordinate system and frame is a rectangle that completely
坐标系里的位置，frame 是一个矩形

327
00:14:38,377 --> 00:14:41,612
encases you in your superview's coordinate system.
在父视图坐标系里完全包含你的边框

328
00:14:41,681 --> 00:14:44,515
And you might think, well the size of my frame is gonna be
你可能会想，frame 的 size 应该和

329
00:14:44,584 --> 00:14:47,752
exactly the same size as my bounds size, right?
bounds 的 size 是一样大的，是吧？

330
00:14:47,821 --> 00:14:53,157
And the answer is no, because views can be rotated.
其实不然。因为我们可以旋转视图

331
00:14:53,225 --> 00:14:56,194
And if you have a rotated view like this green one,
比如我们这里旋转的绿色视图

332
00:14:56,262 --> 00:14:57,962
Inside the code that's drawing in View B, its bounds just
在那个 View B 绘图，bounds 就是

333
00:14:57,963 --> 00:14:59,663
View B.
View B 的边界

334
00:14:59,732 --> 00:15:01,933
looks like a normal rectangle, the fact that it's rotated,
虽然被旋转了，但和在普通的矩形中没有区别

335
00:15:02,001 --> 00:15:03,934
it doesn't even know it's rotated.
其实它都不知道被旋转了

336
00:15:04,003 --> 00:15:06,637
But if you look at the center of it, or if you look at
但如果你观察它的 center

337
00:15:06,706 --> 00:15:10,574
the frame that encloses it, look, it's not the same size.
和包含它的 frame，仔细看，大小是不一样的

338
00:15:10,643 --> 00:15:12,193
It has to be bigger because,
frame 必须要大些

339
00:15:12,194 --> 00:15:13,744
to the superview, View A,
因为对于父视图 View A

340
00:15:13,813 --> 00:15:16,547
View B kinda looks like a diamond, right?
View B 是一个菱形

341
00:15:16,616 --> 00:15:17,915
So it has to be bigger.
所以必须要大些才能包含

342
00:15:17,984 --> 00:15:22,920
So the bottom line here, never use frame or center to draw.
最下面这一行写的，“切忌在绘制中使用 frame 和 center”

343
00:15:22,989 --> 00:15:25,923
Frame and center are only used to position you
frame 和 center 只是用来定位

344
00:15:25,992 --> 00:15:26,557
in your super view.
你在父视图中的位置

345
00:15:26,626 --> 00:15:28,126
Okay, you can use either one.
任选一个都行

346
00:15:28,194 --> 00:15:29,794
If you set the center, it'll move the frame,
如果你设置 center，frame 会跟着动

347
00:15:29,863 --> 00:15:31,896
if you set the frame, it'll adjust the center, okay.
如果你设置 frame，center 会相应调整

348
00:15:31,964 --> 00:15:32,764
They're tied together.
他们是相关联的

349
00:15:34,801 --> 00:15:35,699
Okay.
好

350
00:15:35,768 --> 00:15:37,735
How do we create views?
那我们如何创建视图呢？

351
00:15:37,804 --> 00:15:39,336
Okay, because I already told you we don't really use
因为我已经告诉过你们

352
00:15:39,405 --> 00:15:40,571
the initializer, we don't, you know,
我们并不怎么用构造器

353
00:15:40,640 --> 00:15:42,406
create them in code very much.
来在代码中创建视图

354
00:15:42,475 --> 00:15:43,474
What we usually do is we drag them out
我们一般是拖到 Interface Builder 里

355
00:15:43,475 --> 00:15:44,474
Okay?
是吧？

356
00:15:44,543 --> 00:15:47,411
from the Object Palette in the bottom of the utilities window
从右边工具区下面的对象库（Object Palette）

357
00:15:47,479 --> 00:15:49,013
in Interface Builder.
拖到 Interface Builder 里

358
00:15:49,081 --> 00:15:52,316
But if I built a custom view, Paul's view or
但如果我自己写的自定义视图，比如 Paul'sView

359
00:15:52,385 --> 00:15:56,420
something, it's not going to be in the palette, okay.
什么的，肯定是不会出现在对象库里的

360
00:15:56,489 --> 00:15:58,556
Xcode didn't ship with my view in the palette.
Xcode 并不是在对象库里带着我的视图发布的

361
00:15:58,625 --> 00:16:01,491
So instead, there's a generic view, just plain UIView, and
所以我们就用通用的视图，纯 UIView

362
00:16:01,560 --> 00:16:03,594
you're gonna drag that in.
就把那个拖进去

363
00:16:03,663 --> 00:16:05,696
But then, you're gonna inspect it using the top half of
但是你还需要“观察”它

364
00:16:05,765 --> 00:16:07,298
the utilities pane on the right, right?
用右边工具区上半部分

365
00:16:07,367 --> 00:16:09,200
You're gonna inspect it and
你观察的目的

366
00:16:09,268 --> 00:16:11,568
change its class to not be UIView.
是把 class 从 UIView

367
00:16:11,637 --> 00:16:14,272
It's gonna be your subclass of UIView, so Paul view or
改为你自己写的 UIView 子类，比如 Paul'sView

368
00:16:14,340 --> 00:16:15,673
whatever, okay?
或者是其他什么的

369
00:16:15,742 --> 00:16:17,374
And this is a very important step to remember.
你要记住这很重要的一步

370
00:16:17,443 --> 00:16:19,977
When you create a custom view and you drag it into your UI,
当你编写一个自定义视图，拖进 UI 之后

371
00:16:20,046 --> 00:16:22,346
you have to change its class to be your custom class.
你需要把类改为你自定义的类

372
00:16:22,415 --> 00:16:24,615
And we'll see that in the demo, how it works.
我们会在示例中看到如何操作

373
00:16:26,152 --> 00:16:27,385
When you create it in code, of course,
如果你是纯代码构造的话

374
00:16:27,453 --> 00:16:29,319
you're just doing UIView(frame:),
那自然是使用 UIView(frame:)

375
00:16:29,388 --> 00:16:30,888
and you provide the frame, okay?
然后把 frame 传进去

376
00:16:30,957 --> 00:16:33,357
And that frame, remember, what does it describe?
还记得这 frame 代表的是什么吗？

377
00:16:33,426 --> 00:16:35,826
Describes where this view is gonna be in its super view
它是说子视图应该放到父视图

378
00:16:35,894 --> 00:16:39,097
when it gets added, that's all the frame is doing, okay?
的哪个位置，这就是它的作用

379
00:16:39,165 --> 00:16:41,232
And you can create it with UIView(), no arguments.
或者是用 UIView()，没有参数

380
00:16:41,300 --> 00:16:43,234
Then it will be zero width, zero height, and
构造出来宽和高都为零

381
00:16:43,303 --> 00:16:45,903
it'll be at zero, zero, so you won't even see it, so.
位于 (0, 0)，所以你是看不到它的

382
00:16:45,971 --> 00:16:47,070
But you could come along later and
但你可以之后再设置

383
00:16:47,139 --> 00:16:50,508
change its frame and/or its center to move it around.
通过更改 frame 和/或 center 来移动它

384
00:16:51,944 --> 00:16:53,210
Here, it's a really quick example,
这里是个简单的例子

385
00:16:53,279 --> 00:16:54,245
how to create a view in code.
展示如何用代码创建视图

386
00:16:54,314 --> 00:16:56,413
I'm gonna create a UILabel.
我创建一个 UILabel

387
00:16:56,482 --> 00:16:59,283
UILabel is just a subclass of UIView.
UILabel 是 UIView 的一个子类

388
00:16:59,352 --> 00:17:01,719
And notice that on the second line there,
注意这里的第二行

389
00:17:01,788 --> 00:17:05,255
I'm just saying label = UILabel(frame:) of whatever.
我用的是 let label = UILabel(frame: 边框)

390
00:17:05,324 --> 00:17:07,992
So I'm giving it this frame, 20, 20, 100, 50, right?
所以我给的是 (20, 20, 100, 50)

391
00:17:08,061 --> 00:17:10,427
And then I'm setting the text to "Hello".
我把文字设为 "Hello"

392
00:17:10,496 --> 00:17:13,497
Well, if I was doing this code in a UIViewController,
如果我在 UIViewController 里写这段代码

393
00:17:13,566 --> 00:17:15,866
then I could put it at that top level view,
那我需要把它放到最顶层的视图里

394
00:17:15,935 --> 00:17:18,769
it'd look like that, view.addSubview, okay?
就用 view.addSubview

395
00:17:18,838 --> 00:17:20,438
And it would add the subview.
然后它就会把它加上去了

396
00:17:20,506 --> 00:17:23,540
Custom views, so why do I ever need a custom view?
那我为什么需要自定义的视图呢？

397
00:17:23,609 --> 00:17:25,410
Either I need to do custom drawing or
要么是我需要自己绘图

398
00:17:25,478 --> 00:17:28,479
I need to do custom multi-touch input, okay?
要么是我需要自定义多点触控输入的处理

399
00:17:28,547 --> 00:17:29,480
Those are the reasons
这两个是主要的原因

400
00:17:29,549 --> 00:17:31,682
that you're gonna create a custom view.
可能会让你自定义视图

401
00:17:31,750 --> 00:17:34,284
And so we're gonna focus on the drawing, and
我们主要是讲绘图

402
00:17:34,353 --> 00:17:36,754
the drawing is very, very simple, okay?
绘图是很，很简单的

403
00:17:36,822 --> 00:17:39,556
There's this one method that's called draw.
有一个方法叫 draw

404
00:17:39,625 --> 00:17:42,626
And it takes one argument, which is a rect.
接受一个参数 rect

405
00:17:42,695 --> 00:17:45,062
For historical reasons, we sometimes call it drawRect,
因为历史原因我们有时把它叫做 drawRect

406
00:17:45,131 --> 00:17:47,165
but it's not actually called drawRect anymore.
虽然现在已经不叫这个名字了

407
00:17:47,233 --> 00:17:50,001
It's called draw, and the argument is called rect.
现在名字叫 draw，参数叫 rect

408
00:17:53,539 --> 00:17:55,907
And this draw is gonna be sent to you by the system.
系统会调用你这个方法

409
00:17:55,975 --> 00:17:58,742
It's sent to your UIView subclass,
发送给 UIView 的子类

410
00:17:58,811 --> 00:18:01,345
you override it, and it gets sent to you by the system when
你重写这个方法，系统调用这个方法

411
00:18:01,414 --> 00:18:03,447
the system wants you to draw yourself.
会是在当系统想要你绘制的时候

412
00:18:03,516 --> 00:18:06,450
This is the only way you can draw in your view,
这是你在视图里绘制的唯一方法

413
00:18:06,519 --> 00:18:09,019
is to be asked by the system to draw.
那就是通过系统给你机会绘制

414
00:18:09,088 --> 00:18:13,524
There is no other way to draw in iOS.
在 iOS 上绘图就没有其他方法了

415
00:18:13,593 --> 00:18:15,793
So what's that rectangle about?
那个 rect 是用来干什么的呢？

416
00:18:15,862 --> 00:18:18,462
That rectangle is some sub-area in your bounds
那个 rect 是你 bounds 里的一部分

417
00:18:18,531 --> 00:18:19,930
that it wants you to draw.
系统希望你绘制的部分

418
00:18:19,999 --> 00:18:22,533
Now, that's a performance enhancement, because you can
这样能够优化性能

419
00:18:22,602 --> 00:18:25,269
ignore that and draw your whole view, if you'd like.
因为如果需要，你可以忽略其他部分

420
00:18:25,337 --> 00:18:27,438
But like in your assignment three, you're probably gonna
比如在作业三中

421
00:18:27,506 --> 00:18:29,106
wanna pay attention to this rectangle because
你应该注意这个 rect

422
00:18:29,175 --> 00:18:32,510
your assignment three's draw is gonna be pretty expensive,
因为作业三的绘图非常复杂

423
00:18:32,579 --> 00:18:34,846
so you wanna draw as little as possible.
所以你应该能少画就少画

424
00:18:36,216 --> 00:18:37,914
So that's what this draw is, very simple,
这就是 draw，非常简单

425
00:18:37,983 --> 00:18:40,117
it's just called by the system, time for you to draw.
由系统调用

426
00:18:40,186 --> 00:18:41,385
It's the only way to draw.
这也是唯一的绘制方法

427
00:18:41,454 --> 00:18:43,855
So it's really, really easy to understand.
非常好理解

428
00:18:44,790 --> 00:18:48,325
Never call this method, ever.
千万不要自己调用这个方法

429
00:18:48,394 --> 00:18:49,827
If you ever call this method, it's wrong.
如果你自己调用的话，那就是错误的

430
00:18:50,796 --> 00:18:51,895
The system calls this method,
这个方法是由系统调用的

431
00:18:51,964 --> 00:18:54,198
the system's the only one who calls this method.
只应该让系统来调用

432
00:18:54,267 --> 00:18:56,233
So what happens if you need to draw?
那如果你希望绘制该怎么做呢？

433
00:18:56,302 --> 00:18:58,468
Something changed, and you wanna redraw.
有些内容发生了变化，你想要重画

434
00:18:58,537 --> 00:19:00,638
You call one of these two methods, setNeedsDisplay or
你可以调用这个方法，setNeedsDisplay

435
00:19:00,706 --> 00:19:02,873
setNeedsDisplay with the argument of a rect.
没有参数，或者带个参数 rect

436
00:19:02,942 --> 00:19:05,309
And that's telling the system, hey, system,
告诉系统说：“嘿

437
00:19:05,378 --> 00:19:06,744
my view needs to be redrawn.
我的视图需要重画

438
00:19:06,813 --> 00:19:08,212
Please ask me to redraw it.
让我来重画吧”

439
00:19:08,280 --> 00:19:10,247
And at some appropriate time in the future,
然后在将来某个合适的时间

440
00:19:10,316 --> 00:19:11,915
it will ask you to redraw it.
系统会让你重画

441
00:19:11,984 --> 00:19:14,218
But it knows better than you when the best time to draw is,
系统比你更清楚什么时候适合重画

442
00:19:14,287 --> 00:19:15,486
believe me.
相信我

443
00:19:15,555 --> 00:19:17,721
And the rect that you can pass, that's just the rect
如果你有 rect 作为参数，那个 rect

444
00:19:17,790 --> 00:19:19,723
that's gonna be passed onto your draw.
就会作为传给 draw 的参数

445
00:19:19,792 --> 00:19:22,426
So setNeedsDisplay with a rect is like an optimized
所以 setNeedsDisplay(CGRect)

446
00:19:22,494 --> 00:19:23,494
setNeedsDisplay.
是个优化的版本

447
00:19:23,563 --> 00:19:24,695
It's like, I need to be redrawn, but
就像是说：“我想要重画

448
00:19:24,763 --> 00:19:25,596
only this part of me.
但仅仅是这一部分”

449
00:19:25,665 --> 00:19:30,701
And you can send this to any UIView, say, redraw this view.
你可以发送这个函数给任何 UIView，让它重画

450
00:19:30,770 --> 00:19:33,069
Usually, views send it to themselves though because
不过一般都是视图自己调用

451
00:19:33,138 --> 00:19:36,774
they're the ones who know best when they need to be redrawn,
因为它们自己最了解是否需要重画

452
00:19:36,843 --> 00:19:37,441
okay?
是吧？

453
00:19:38,477 --> 00:19:39,643
Alright.
好

454
00:19:39,712 --> 00:19:43,580
So, how do I implement this drawRect,
那我如何实现这个 drawRect

455
00:19:43,649 --> 00:19:48,352
draw, draw with a CGRect argument guy?
draw(CGRect) 呢？

456
00:19:48,421 --> 00:19:50,554
And the answer is, you're gonna do it with paths.
答案是使用路径

457
00:19:50,623 --> 00:19:54,057
You're gonna create paths, and then you're going to stroke
创建一些路径，然后描边

458
00:19:54,126 --> 00:19:57,161
them and fill them to make shapes and things like that.
填色，以此绘制图形等

459
00:19:57,230 --> 00:20:00,097
And then you're also gonna use text and images.
然后你还可以用文字和图片

460
00:20:00,166 --> 00:20:03,134
So that's the primary way that you're going to draw
这是我们主要在这里

461
00:20:03,202 --> 00:20:04,167
in there, okay?
绘制的方法

462
00:20:04,236 --> 00:20:06,103
So we'll talk about text and images in a minute.
我等下再讲文字和图片

463
00:20:06,171 --> 00:20:08,171
Let's talk about the drawing with the paths first.
我们先讲如何画路径

464
00:20:08,240 --> 00:20:09,473
There's really two ways to do it.
有两种方法

465
00:20:09,541 --> 00:20:11,442
One is, you can get what's called a context,
一种是获得 context，上下文

466
00:20:11,510 --> 00:20:14,010
a drawing context, and I'll show you how to get it.
用来绘制的上下文，我会告诉你如何获取

467
00:20:14,079 --> 00:20:17,547
And then you can send messages to that context like, move to
然后你发消息给 context 说

468
00:20:17,616 --> 00:20:21,718
this point, draw a line to here, add an arc over here,
移动到这个点，画一条线到这里，在这里加一个圆弧

469
00:20:21,787 --> 00:20:24,655
put some text over here, things like that, okay?
在这里放几个字，像这样的操作

470
00:20:24,724 --> 00:20:26,256
Actually, the text we're gonna do in a different way,
但是我们文字会通过另一种方法实现

471
00:20:26,325 --> 00:20:27,892
but, so that's one way.
但这就是其中一种方法

472
00:20:27,960 --> 00:20:31,028
And then the other way is, you can create a path object,
另一种方法是，创建一个路径对象

473
00:20:31,097 --> 00:20:34,798
okay, using UIBezierPath, and it's the same kind of thing.
使用 UIBezierPath，还是类似的操作

474
00:20:34,867 --> 00:20:37,067
But you're gonna create this object that you're gonna tell
但是你要先创建一个对象

475
00:20:37,136 --> 00:20:39,403
that object, okay, I want this path to be moving to here, and
然后告诉这个对象，我先要路径移到这里

476
00:20:39,472 --> 00:20:41,438
then a line here, and then an arc over to here, okay?
然后这里有条线，这里有个圆弧，好吧？

477
00:20:41,507 --> 00:20:42,606
So you create this path, and
所以你先创建一个路径

478
00:20:42,674 --> 00:20:44,709
then you send a message to that path saying, okay,
然后发消息给路径说

479
00:20:44,777 --> 00:20:45,810
stroke it.
给路径描边

480
00:20:45,878 --> 00:20:47,744
So it's a subtle difference, but you'll see.
很细微的区别，你们之后会看到

481
00:20:47,813 --> 00:20:49,880
We're gonna focus mainly on the UIBezierPath way,
我们主要是使用 UIBezierpath

482
00:20:49,949 --> 00:20:51,415
because it's kind of a little simpler.
因为相比起来更简单

483
00:20:51,484 --> 00:20:53,517
So let's understand the concepts here of
我们再来了解一些概念

484
00:20:53,586 --> 00:20:56,153
Core Graphics, that's what the CG is that you're seeing in
Core Graphics，这就是你看到的这些 CG

485
00:20:56,222 --> 00:20:57,020
all the places here.
所代表的，还真是无处不在

486
00:20:57,089 --> 00:21:00,224
And the number one thing about Core Graphics is,
第一个关于核心图形库的是

487
00:21:00,293 --> 00:21:01,391
we need a context.
我们需要一个上下文

488
00:21:01,460 --> 00:21:03,927
And that context might be a drawing context for on-screen,
这个 context 可以是在屏幕上绘图的上下文

489
00:21:03,996 --> 00:21:06,062
it might be a printing context if we're printing,
可以是打印用的上下文

490
00:21:06,131 --> 00:21:08,999
might be a context of drawing to an off-screen bitmap, etc.
可以是在后台绘制位图的上下文等

491
00:21:09,067 --> 00:21:12,236
The one you care about is obviously the context to
我们所在意的 context 自然是

492
00:21:12,304 --> 00:21:13,937
draw in your drawRect.
在 drawRect 中用的上下文

493
00:21:14,006 --> 00:21:15,539
And you get that by calling this function.
获取它是通过调用这个函数

494
00:21:15,608 --> 00:21:16,573
This is just a Swift function,
一个 Swift 函数

495
00:21:16,642 --> 00:21:17,975
it's not on a class or anything.
并不属于某个类

496
00:21:18,043 --> 00:21:20,511
UIGraphicsGetCurrentContext(), and
叫做 UIGraphicsGetCurrentContext()

497
00:21:20,580 --> 00:21:23,847
that's going to get you a context that you can then
这回返回给你一个支持

498
00:21:23,916 --> 00:21:27,618
tell it to create a path by moving and all that stuff.
创建路径和移动等等的上下文

499
00:21:27,686 --> 00:21:30,387
Which is what you do then, you create these paths out of
这些就是你接下来要做的

500
00:21:30,456 --> 00:21:32,623
lines and arcs and things like that.
通过线条和圆弧等构成路径

501
00:21:32,692 --> 00:21:35,359
Then you set drawing attributes in the context,
然后在上下文中调整绘制属性

502
00:21:35,427 --> 00:21:37,962
like the colors you wanna use, the fonts if you're doing
比如你想要的颜色，字体

503
00:21:38,031 --> 00:21:41,432
text, line widths, those kinds of things.
线宽度，等等

504
00:21:41,501 --> 00:21:43,300
You set those all up, and then you stroke and fill.
当你设置好后，就 stroke 和 fill

505
00:21:43,369 --> 00:21:44,801
And that's it, stroking and
然后就完成了，描边和填充

506
00:21:44,870 --> 00:21:47,804
filling are actually the only two directives that actually
是仅有的两条命令

507
00:21:47,873 --> 00:21:49,740
cause something to happen on screen.
真正能让东西显示在屏幕上

508
00:21:49,809 --> 00:21:50,574
But keep in mind that, like,
但记住

509
00:21:50,642 --> 00:21:55,279
a font is basically just a really exquisite path filled,
文字其实就是被填充的复杂线条

510
00:21:55,348 --> 00:21:57,614
okay, or stroked and filled.
或者说不仅填充还描了边

511
00:21:57,683 --> 00:22:00,884
So you can do a lot with stroking and filling.
所以你可以用填充和描边做很多事情

512
00:22:00,953 --> 00:22:03,420
So UIBezierPath kinda encapsulates all of those
所以 UIBezierPath 把

513
00:22:03,489 --> 00:22:05,956
Core Graphics concepts into an object.
Core Graphics 函数封装进对象

514
00:22:06,025 --> 00:22:08,525
And so I have an example here to show you how I would use
我这里有个例子向你们展示

515
00:22:08,594 --> 00:22:12,929
UIBezierPath to draw a triangle on screen.
如何用 UIBezierPath 在屏幕上画一个三角形

516
00:22:12,998 --> 00:22:14,965
First, I'm gonna create the path by just saying,
像刚刚说的，我要先创建一个路径

517
00:22:15,033 --> 00:22:16,099
path = UIBezierPath().
用的是 let path = UIBezierPath()

518
00:22:16,168 --> 00:22:17,768
There are other initializers for it,
它还有其他构造器

519
00:22:17,837 --> 00:22:18,735
which we'll see in the demo.
这些东西我们将在演示中看到

520
00:22:18,804 --> 00:22:21,371
But this one just creates a blank path to start.
这一个会创建一个空路径

521
00:22:21,440 --> 00:22:23,206
Then, you move around with the path.
然后，你需要移动这个路径

522
00:22:23,275 --> 00:22:25,876
So like I can say, move to, which (80,
像我说的，移动它到（80, 50）

523
00:22:25,945 --> 00:22:29,480
50) is like halfway across this, this little screen.
差不多过这个小屏幕的一半

524
00:22:29,548 --> 00:22:32,949
This is small screen, let's say, 160 points wide.
我们假设这个屏幕 160 点宽

525
00:22:33,018 --> 00:22:34,751
80 and then 50 down, okay?
这个操作会右移 80，下移 50

526
00:22:34,820 --> 00:22:39,556
Then I'm gonna add a line down to 140, 50, see that, okay?
然后我要加一条线到 (140, 50)

527
00:22:39,625 --> 00:22:42,659
Then I'm gonna add another line over to 10,
然后我要再加另一条线

528
00:22:42,728 --> 00:22:45,929
off to the left, I'm still 150 down.
向左移动到 10，纵坐标依然在 150

529
00:22:45,998 --> 00:22:48,832
Then I'm gonna close the path, okay, using close, and
然后我要使用 close() 闭合路径

530
00:22:48,901 --> 00:22:51,101
that just closes it back to the start.
让它与起始点闭合

531
00:22:51,170 --> 00:22:53,436
So look, I made a triangle, okay, really easy.
看，我画了个三角形，非常简单

532
00:22:53,505 --> 00:22:56,940
Now, the only thing is, all this code right here would
现在，唯一的一件事是，这些代码

533
00:22:57,009 --> 00:23:00,410
actually draw, instead of that triangle right there,
真的会绘制出三角形吗？

534
00:23:00,479 --> 00:23:03,113
would draw this: nothing.
不会，什么都不会显示出来

535
00:23:03,182 --> 00:23:06,083
You would see no drawing with that code because we haven't
你看不到用代码绘制的三角形因为

536
00:23:06,151 --> 00:23:07,117
stroked or filled it.
还没有填充或描边

537
00:23:07,186 --> 00:23:09,386
The stroking and filling is what draws.
填充和描边才会绘制

538
00:23:09,455 --> 00:23:10,754
So how do we do the stroking and fill?
那么我们如何填充和描边呢？

539
00:23:10,823 --> 00:23:13,157
Well, we need to set the colors that we wanna fill and
首先，需要设置填充和描边的颜色

540
00:23:13,226 --> 00:23:15,792
stroke with. So we're gonna talk about UIColor in a minute,
UIColor 是什么等会儿讲

541
00:23:15,861 --> 00:23:17,261
But here, I'm taking green and
在这里，我将使用绿色

542
00:23:17,330 --> 00:23:18,829
sending it the message setFill.
调用它的 setFill 方法

543
00:23:18,897 --> 00:23:21,865
So you actually set your color to fill with
所以在设定你的填充颜色时

544
00:23:21,934 --> 00:23:24,601
by sending a message to a color.
是通过发送一个消息给颜色

545
00:23:24,670 --> 00:23:25,969
You get a color, and you send it a message,
你选择一个颜色，然后向其发送一条消息

546
00:23:26,038 --> 00:23:27,237
set that as my fill color.
设置那个颜色作为我的填充色，

547
00:23:27,306 --> 00:23:28,104
And the same thing with a stroke,
描边也是同理

548
00:23:28,173 --> 00:23:28,772
set it as a stroke color.
设置其为描边的颜色

549
00:23:28,840 --> 00:23:32,842
So I set my stroke color to red, my fill color to green.
现在描边的颜色为红色，填充色为绿色

550
00:23:32,911 --> 00:23:35,613
But when I'm talking about attributes like line width,
但当设置比如线条宽度等属性

551
00:23:35,681 --> 00:23:38,716
I send that to the path, to the UIBezierPath.
我会发送消息到 UIBezierPath

552
00:23:38,784 --> 00:23:41,318
Set your line width to three, okay, so I do that.
path.lineWidth = 3 设置线宽度为 3

553
00:23:41,387 --> 00:23:45,622
Now, if I say path.fill, now I get a green triangle.
现在 path.fill()，我会得到一个绿色的三角形

554
00:23:45,691 --> 00:23:46,823
Because my fill color was green,
因为我的填充色是绿色

555
00:23:46,892 --> 00:23:48,859
and it takes that path and it fills it in.
它会把路径填充成这个颜色

556
00:23:48,927 --> 00:23:50,594
That's what fill does.
那就是填充所起到的作用

557
00:23:50,663 --> 00:23:53,563
And similarly, if I say path.stroke,
同样的，path.stroke

558
00:23:53,632 --> 00:23:55,332
I get a red line around.
红色的线条会环绕它

559
00:23:55,401 --> 00:23:58,802
Because the path that I took to get around there gets
因为我设置封闭的路径

560
00:23:58,871 --> 00:24:02,206
stroked with a three-point wide red line.
用三个点宽的红色线条勾了线

561
00:24:02,274 --> 00:24:04,841
So that's it, that's quite simple actually.
完成了，其实非常简单

562
00:24:04,910 --> 00:24:05,543
That's how we draw.
这就是我们绘制的过程

563
00:24:07,579 --> 00:24:08,280
Okay?
懂了吗？

564
00:24:08,980 --> 00:24:10,380
And, UIBezierPath also knows how to draw a lot of common
同时，UIBezierPath 也知道如何画出很多

565
00:24:10,449 --> 00:24:13,350
shapes, like rounded rectangles, and ovals, and
常见的形状，比如像圆角矩形，椭圆形等

566
00:24:13,419 --> 00:24:16,053
things like that, so you should familiarize yourself
所以你熟练地使用

567
00:24:16,121 --> 00:24:20,256
with UIBezierPath's API, of course.
UIBezierPath 是必须的

568
00:24:20,325 --> 00:24:22,392
Another cool thing you can do with UIBezierPath is you
另一件很酷的事情就是 UIBezierPath

569
00:24:22,461 --> 00:24:24,094
create a path like that triangle, and
比如像刚才那个三角形

570
00:24:24,162 --> 00:24:27,798
you can clip all your drawings to that path.
你可以把那个路径作为遮罩

571
00:24:27,866 --> 00:24:30,367
So you could draw this elaborate picture that only
你可能画一个很复杂的图像

572
00:24:30,436 --> 00:24:33,003
show the part that shows through that triangle,
但只画透过三角形的那部分

573
00:24:33,071 --> 00:24:34,938
if you take that triangle path that we just created and
如果你通过我们刚刚创建的三角形路径

574
00:24:35,007 --> 00:24:37,073
say add clip to it.
调用它的 addClip 方法

575
00:24:37,142 --> 00:24:37,841
Because after that,
在那之后

576
00:24:37,909 --> 00:24:42,012
all drawing is only gonna show up inside that triangle,
绘制的东西只显示在三角形内的部分

577
00:24:42,080 --> 00:24:44,381
which is kinda cool,
真的很酷

578
00:24:44,382 --> 00:24:46,683
you can make some pretty cool effects by doing it.
你可以通过这个方法来做出一些非常酷的效果

579
00:24:46,752 --> 00:24:48,485
The UIBezierPath also knows how to,
UIBezierPath 也能实现

580
00:24:48,554 --> 00:24:50,521
it has this method contains that will,
通过叫做 contains(_:) 的这个方法

581
00:24:50,589 --> 00:24:53,389
tell you whether a point is inside the path.
告诉你这个点是否在路径里面

582
00:24:53,458 --> 00:24:56,126
So that's good if you want to do some touch thing or people
在处理触控的时候可以使用

583
00:24:56,195 --> 00:24:58,962
are touching on something and you wanna do hit detection,
比如一个人碰到了某个元素

584
00:24:59,031 --> 00:25:00,997
basically, what they're touching on.
你可以检测出究竟按到了什么

585
00:25:01,066 --> 00:25:02,933
All right, and there's tons of other stuff in UIBezierPath,
好了，在 UIBezierPath 中还有大量其它的东西

586
00:25:03,001 --> 00:25:04,567
don't have time to cover it, you should look it up.
但没有时间去顾及了，你应该自己去了解

587
00:25:04,636 --> 00:25:06,369
Okay, UIColor.
好了，下一个 UIColor

588
00:25:06,438 --> 00:25:07,972
So UIColor, really simple.
UIColor 非常简单

589
00:25:08,040 --> 00:25:10,641
Okay, there's some common colors like green, red,
UIColor 中有一些常用的颜色，比如绿色、红色

590
00:25:10,709 --> 00:25:11,808
yellow, purple.
黄色、紫色

591
00:25:11,877 --> 00:25:13,610
Those have type methods on UIColor.
这些颜色都是 UIColor 的类方法（注：属性）

592
00:25:13,679 --> 00:25:15,278
Remember, type methods, static methods?
记住，类方法和静态方法

593
00:25:15,347 --> 00:25:16,046
They're on the type.
都是属于类型的

594
00:25:16,115 --> 00:25:17,247
You don't need an instance of it.
并不需要一个实例

595
00:25:17,316 --> 00:25:19,416
So that's like UIColor.green.
比如 UIColor.green 就是绿色

596
00:25:19,484 --> 00:25:22,686
But there's also initializers that let you create colors
还可以用 UIColor 的构造器创建新的颜色

597
00:25:22,755 --> 00:25:27,057
from RGB, red, green, blue, or HSB, that's hue, saturation, brightness.
比如 RGB（红、绿、蓝）和 HSB（色调、饱和度、亮度）

598
00:25:27,125 --> 00:25:28,575
You can even create a color
你甚至可以把一个图案

599
00:25:28,576 --> 00:25:30,026
that's made from a pattern.
创建成颜色

600
00:25:30,095 --> 00:25:31,794
So that when you draw with that color,
那么在你绘制那个颜色的时候，

601
00:25:31,863 --> 00:25:33,296
it's drawing in a pattern.
实际上绘制的是那个图案

602
00:25:33,365 --> 00:25:34,164
Okay, like a really thick line,
那么，比如说一条很粗的线

603
00:25:34,232 --> 00:25:36,099
we'd actually be showing the details of a pattern,
能绘制出图案的细节

604
00:25:36,168 --> 00:25:38,067
which is kind of fun, using UIImage,
用的是 UIImage，这会很有趣

605
00:25:38,136 --> 00:25:39,303
which I'll talk about in a little bit.
UIImage 之后我再展开讲一点

606
00:25:40,773 --> 00:25:43,640
Of course, all UIViews have a background color.
当然，所有的 UIView 都有一个背景色

607
00:25:43,709 --> 00:25:46,743
We saw this when we did our buttons in the calculator,
我们之前看到过的，以前做的计算器的按键

608
00:25:46,812 --> 00:25:48,211
we made the background color
我们给计算器的按键设置了背景色

609
00:25:48,280 --> 00:25:50,848
of a lot of our buttons be light gray, and I'm sure in
按键的颜色是亮灰，并且我肯定

610
00:25:50,916 --> 00:25:52,649
the homework assignments you made it other colors.
（你们）在课后作业中给它换了其它颜色

611
00:25:52,717 --> 00:25:54,718
Okay, that's just a var on UIView,
那只是 UIView 中的一个变量

612
00:25:54,786 --> 00:25:56,820
that button inherited from UIView.
那个按键从 UIView 中继承

613
00:25:56,888 --> 00:25:59,155
And you can set it to any UIColor you want.
你可以设置为任何你想要的 UIColor 颜色

614
00:25:59,224 --> 00:26:02,359
Now, an interesting thing about colors though is that
现在，有个关于颜色的有趣问题是

615
00:26:02,427 --> 00:26:06,163
they can be transparent, or even semi-transparent, okay?
颜色可以是透明或者是半透明的

616
00:26:06,232 --> 00:26:09,299
And they are done, you specify that with alpha.
你可以通过指定 alpha 来实现

617
00:26:09,368 --> 00:26:10,900
How many people here know what alpha
有多少人知道在图形处理中

618
00:26:10,969 --> 00:26:11,936
is when it comes to graphics?
alpha 代表什么意思？

619
00:26:13,038 --> 00:26:14,137
Okay, so hardly anybody.
好吧，看来几乎没有

620
00:26:14,206 --> 00:26:18,141
So alpha is just a value between 0 and 1, where 0 means
alpha 就是一个 0 到 1 之间的数值

621
00:26:18,210 --> 00:26:21,144
fully transparent and 1 is fully opaque.
0 是全透明，1 意味着不透明

622
00:26:21,213 --> 00:26:23,247
So if you have a color like a triangle and
比如你有一个三角形

623
00:26:23,315 --> 00:26:26,016
you fill it with green, then if it's fully opaque,
你为其填充了绿色，如果它不透明

624
00:26:26,084 --> 00:26:28,551
you can't see anything behind that triangle.
你就不能看到任何在三角形后面的东西

625
00:26:28,620 --> 00:26:30,787
But if it were 50%, 0.5 alpha,
但你设置 50%，0.5 alpha 值

626
00:26:30,856 --> 00:26:33,189
then you'd be able to see the green but
你依然可以看到绿色

627
00:26:33,258 --> 00:26:36,927
you'd also be able to see the things behind it a little bit.
但你还可以看到一点绿色背后的东西

628
00:26:36,995 --> 00:26:38,728
50% kinda, okay?
半透明的样子，懂了吗？

629
00:26:38,797 --> 00:26:40,230
If it was zero, you wouldn't see any
如果是 0，那么你就看不到任何绿色

630
00:26:40,298 --> 00:26:42,165
green because it would be fully transparent.
因为它是全透明

631
00:26:42,234 --> 00:26:43,267
You'd be looking all the way through it, so
你能看到其背后所有的东西

632
00:26:43,335 --> 00:26:45,102
you wouldn't see any green, okay?
你无法看到任何绿色，懂了吗？

633
00:26:45,171 --> 00:26:47,304
So, all that you can put anywhere in that range, and
你可以在那个范围里取任何的值

634
00:26:47,372 --> 00:26:49,906
the way you create a transparent color is by taking
接着，创建一个透明颜色的方法是选定一个

635
00:26:49,975 --> 00:26:53,710
a opaque color and saying, withAlphaComponent,
一个不透明的颜色，然后调用它的 withAlphaComponent

636
00:26:53,779 --> 00:26:55,946
whatever alpha you want between 0 and 1.
alpha 取在 0 到 1 之间任何你想要的值

637
00:26:56,015 --> 00:26:57,281
Okay? And that gives you
懂不？然后它就会给你

638
00:26:57,349 --> 00:26:58,314
a transparent or
一个全透明

639
00:26:58,383 --> 00:27:01,251
semi-transparent version of the color.
或者半透明版本的颜色了

640
00:27:01,320 --> 00:27:02,352
And you can draw with that.
你就可以用它来绘制

641
00:27:02,421 --> 00:27:07,557
However, if you draw with transparency in your UIView,
然而，如果你想要在你的 UIView 中用透明度绘制的话

642
00:27:07,626 --> 00:27:10,927
you must set this var on your UIView.
你必须在你的 UIView 中设置这个变量

643
00:27:10,996 --> 00:27:13,530
This is just a var in UIView to false.
把这个 UIView 的 opaque 设置为 false

644
00:27:13,599 --> 00:27:15,265
Okay? Because views assume that
懂不？因为视图们假定

645
00:27:15,334 --> 00:27:17,234
they're fully opaque, okay?
它们是不透明的

646
00:27:17,302 --> 00:27:19,035
And that's performance enhancement.
这跟性能提升有关

647
00:27:19,104 --> 00:27:20,870
It turns out drawing with transparency,
你可以想象，通过透明度绘制的话

648
00:27:20,939 --> 00:27:23,173
as you might imagine, takes a little bit of CPU power
会用到些 CPU 性能

649
00:27:23,242 --> 00:27:26,042
to figure out which pixels show through and all that.
来分辨哪些像素要展示等等

650
00:27:26,111 --> 00:27:28,878
So, by default, it assumes you're drawing fully opaque.
那么，默认情况下，它假定你是不透明绘制

651
00:27:28,947 --> 00:27:30,480
So if you wanna draw with transparency,
所以如果你想通过透明度绘制的话

652
00:27:30,549 --> 00:27:34,050
don't forget to set opaque here to false.
别忘记设置 opaque = false

653
00:27:34,119 --> 00:27:37,921
By the way, you can make your entire view semi-transparent
顺带一提，你可以通过调用这个 alpha

654
00:27:37,989 --> 00:27:39,389
by setting its alpha.
来把你整个视图设置为半透明

655
00:27:39,458 --> 00:27:41,558
So this is a var, not in color,
这就是个变量，不是在 UIColor 对象里的

656
00:27:41,627 --> 00:27:43,226
this is a var in UIView.
这是一个 UIView 的变量

657
00:27:43,295 --> 00:27:44,995
You can say, alpha 0.5,
比如说，alpha = 0.5

658
00:27:45,063 --> 00:27:48,899
in your entire view will be 50% see-through.
那么你整个视图就会 50% 透明

659
00:27:48,968 --> 00:27:50,267
And that would work with a button or
这在按钮或者别的什么上也可以生效

660
00:27:50,336 --> 00:27:52,102
anything because those are just UIViews.
毕竟它们也都是 UIView

661
00:27:53,505 --> 00:27:54,071
Alright?
懂不？

662
00:27:56,108 --> 00:27:58,709
What happens when views overlap and
那么如果视图交叠

663
00:27:58,777 --> 00:28:00,944
we have transparency in the views?
并且有些视图是有透明度呢？

664
00:28:01,012 --> 00:28:04,214
Well, then that subviews that we're talking about,
这就跟我们谈过的子视图有关了

665
00:28:04,282 --> 00:28:07,951
all the subviews of a view starts to matter in the order.
一个视图的所有子视图的顺序就开始有关系了

666
00:28:08,019 --> 00:28:09,486
So the first thing in the subview,
子视图中的第一个

667
00:28:09,555 --> 00:28:12,689
subview sub zero, that's all the way in the back.
第 0 个子视图，它是最最后面的

668
00:28:12,758 --> 00:28:14,925
And then everything else is in the order in front of
然后其他视图按顺序一个个往外面

669
00:28:14,993 --> 00:28:15,859
it, okay?
懂了不？

670
00:28:15,927 --> 00:28:19,062
And so, any transparency that's going on is things
所以，任何有透明度的东西都是按照

671
00:28:19,131 --> 00:28:21,598
stacked up in that order, and you're looking down through
那个顺序堆起来的

672
00:28:21,666 --> 00:28:24,334
the transparency, all the way up to subview zero,
透过透明往里看最后就是第 0 个子视图

673
00:28:24,403 --> 00:28:26,437
so which is in the back, okay?
也就是最后面的那个，懂了不？

674
00:28:28,540 --> 00:28:30,406
You can also completely hide a view.
你当然也可以完全隐藏一个视图

675
00:28:30,475 --> 00:28:33,043
This is very similar--almost identical to--saying
类似于，但不完全是

676
00:28:33,112 --> 00:28:33,977
alpha equals zero.
把 alpha 设置为 0

677
00:28:34,045 --> 00:28:35,812
Which will just make the view not even appear, but
效果是让这个视图都不出现

678
00:28:35,881 --> 00:28:37,246
it will be still in the view hierarchy.
但是它仍然是在视图层次结构里的

679
00:28:37,315 --> 00:28:39,049
It will be still in its superview and
它仍然在它的父类视图里

680
00:28:39,118 --> 00:28:41,384
its subviews will still be subviews of it, but
而且它的子视图们也仍旧是子视图

681
00:28:41,453 --> 00:28:43,753
it all will be completely hidden.
只是它会完全隐藏起来

682
00:28:43,822 --> 00:28:45,155
And why would you wanna do this?
那么你为什么想这么做呢？

683
00:28:45,224 --> 00:28:48,492
Maybe you have some UI where you don't wanna show a button
可能你想当用户进入别的一些区域的时候

684
00:28:48,561 --> 00:28:51,060
until the user has entered some other field or
你不想显示一个按钮

685
00:28:51,129 --> 00:28:51,695
something like that.
或者别的什么

686
00:28:51,764 --> 00:28:52,929
But you wanna make room for the button.
但是你仍然是想让这个按钮存在的

687
00:28:52,998 --> 00:28:54,931
You want it to be ready to appear, so
你仍旧想让它随时准备着出现

688
00:28:55,000 --> 00:28:57,434
you leave it in the view hierarchy, but hidden.
那么你就可以让它依然存在于视图层次结构中，但是视觉效果上是隐藏的

689
00:28:57,503 --> 00:29:00,437
Okay? Alright,
懂了不？那么

690
00:29:00,506 --> 00:29:01,638
let's talk about drawing text.
我们来谈谈绘制文本

691
00:29:01,707 --> 00:29:02,605
How do we draw text?
我们如何绘制文本？

692
00:29:02,674 --> 00:29:05,108
Well, one way to draw text you already know is UILabel.
一种方式是通过 UILabel，你们已经知道了

693
00:29:05,177 --> 00:29:08,078
You could just create a UILabel and make it a subview
只要创建一个 UILabel 然后把它作为你的视图的子视图

694
00:29:08,146 --> 00:29:11,280
of your view and bingo, you got some text in your view.
然后，铛铛，你在你的视图中得到了文本

695
00:29:11,349 --> 00:29:13,082
And now, the only problem with that is,
那么，唯一存在的问题是

696
00:29:13,151 --> 00:29:15,452
you're drawing in your draw, your drawRect thing,
你绘制的代码是在 draw(rect:) 里

697
00:29:15,521 --> 00:29:16,919
you're drawing in there.
你画在了那里

698
00:29:16,988 --> 00:29:19,589
And you have to make sure you drew, if you're drawing around
如果你是在文字周围画，就要保证

699
00:29:19,658 --> 00:29:21,725
the text that it all lined up with your subviews.
你绘制的与你的子视图能对齐

700
00:29:21,794 --> 00:29:24,328
So sometimes you wanna draw in drawRect, right?
有时候，你想在 draw(rect:) 中绘制文本

701
00:29:24,396 --> 00:29:25,495
You want to actually draw in there.
你想通过它绘制文字

702
00:29:25,564 --> 00:29:28,464
And the way you do that is with a class called
那么就需要用到一个类，叫做

703
00:29:28,533 --> 00:29:30,833
NSAttributedString, okay?
NSAttributedString

704
00:29:30,902 --> 00:29:34,504
So NSAttributedString is not a string.
NSAttributedString 不是一个 String

705
00:29:34,573 --> 00:29:37,607
It's not related in any way actually to string, and
它跟 String 没有半毛关系

706
00:29:37,676 --> 00:29:40,844
it's not even an NSString which is the old Objective-C
不幸的是它甚至都不是老 OC 里

707
00:29:40,912 --> 00:29:43,813
style string that was indexed by ints where
通过 int 索引的 NSString

708
00:29:43,882 --> 00:29:47,650
the Swift's one is indexed by string.index, unfortunately.
在 Swift 里是通过 String.Index 索引的

709
00:29:47,719 --> 00:29:49,486
It's neither of those, it's its own thing.
它就是它，不一样的它

710
00:29:49,555 --> 00:29:50,220
Okay?
懂不

711
00:29:50,289 --> 00:29:52,790
It's very closely aligned to old NSString,
它跟老版的 NSString 其实有些接近

712
00:29:52,858 --> 00:29:55,725
not as closely aligned to the modern string.
跟现在的 String 不大接近

713
00:29:55,794 --> 00:29:58,695
But anyway, what an attributed string is it's a string,
无论如何，NSAttributedString 是一个字符串

714
00:29:58,764 --> 00:30:00,864
you can make it out of a string or an NSString.
可以由 String 或者 NSString 构造

715
00:30:00,933 --> 00:30:04,267
And those characters have attributes, colors and
NSAttributedString 有一些属性，颜色啊

716
00:30:04,335 --> 00:30:06,370
fonts and things like that, okay?
字体啊之类的

717
00:30:06,438 --> 00:30:07,337
And it's very simple,
它非常简单

718
00:30:07,406 --> 00:30:08,772
you create one of these strings and
你创建一个

719
00:30:08,841 --> 00:30:11,708
you just send it to message draw at and it will draw
然后让它 draw(at:某个点)

720
00:30:11,777 --> 00:30:15,045
that string at that point at its upper left corner.
它就以那个点为左上角画那个字符串

721
00:30:16,048 --> 00:30:16,997
Okay?

722
00:30:17,998 --> 00:30:19,047
Then you can even find out the size it's going to need to
然后你能通过 size 属性

723
00:30:19,117 --> 00:30:22,352
draw it by sending the message size to an attributed string.
得到它绘制需要用的空间大小

724
00:30:23,455 --> 00:30:24,954
Okay? Now one thing that's
懂不？另外一个事是

725
00:30:25,023 --> 00:30:26,422
kind of bummer about attributed string,
NSAttributedString 令人讨厌的是

726
00:30:26,491 --> 00:30:31,928
it's really an old style API,
它是一个老式 API

727
00:30:31,997 --> 00:30:36,065
var and let don't even work to make it mutable or not.
var 和 let 甚至都不能让它可变或不可变

728
00:30:36,134 --> 00:30:38,368
So if you want a mutable attributed string, attributed
所以如果你想要一个可变的 NSAttributedString

729
00:30:38,437 --> 00:30:40,236
string where you're gonna change its attributes and
来改变属性和

730
00:30:40,305 --> 00:30:43,005
change its text, you need to have a different class called
改变文本的话，你就需要一个不一样的类叫做

731
00:30:43,074 --> 00:30:47,010
NSMutableAttributedString.
NSMutableAttributedString

732
00:30:47,078 --> 00:30:48,945
So things like set attributes, and things of that,
也就是，设置属性啊或者什么的

733
00:30:49,014 --> 00:30:50,380
don't work on an attributed string.
在 NSAttributedString 中不起作用

734
00:30:50,449 --> 00:30:53,917
You have a mutable attributed string.
你需要一个 NSMutableAttributedString

735
00:30:53,986 --> 00:30:56,486
Now, you can, if you have an attributed string, mutable or
现在，你有了一个可变或不可变的富文本字符串

736
00:30:56,555 --> 00:30:59,422
not, you can get back the string that's in it
你可以以 String 类型取回其中的内容

737
00:30:59,491 --> 00:31:03,493
as a string object using the var string, or
不可变的是通过 string 属性

738
00:31:03,561 --> 00:31:05,128
mutable string in a mutable case.
可变的就是 mutableString 属性

739
00:31:06,632 --> 00:31:07,763
That's kinda confusing because,
这容易让人混淆，因为

740
00:31:07,832 --> 00:31:10,333
of course, you're used to var and let being how a string is
当然了，你已经习惯于用 var 或者 let 来知道一个字符串是

741
00:31:10,402 --> 00:31:13,970
mutable or not, but that's how you can get the string back.
可变还是不可变的，但这就是你取回字符串的方法

742
00:31:14,039 --> 00:31:15,872
But let's talk about how you set the attributes.
我们来谈谈如何设置属性吧

743
00:31:15,941 --> 00:31:19,142
So you set the attributes just by passing in this dictionary,
通过传递进一个字典来设置属性

744
00:31:19,211 --> 00:31:20,043
called attributes there.
在这里实参名称叫做 attributes

745
00:31:20,112 --> 00:31:23,113
You can either set attributes or add attributes to what's
你既可以设置属性又可以添加属性到那里

746
00:31:23,182 --> 00:31:26,282
already there, and this dictionary, String:Any,
还有这个字典，[String:Any]

747
00:31:26,351 --> 00:31:28,985
the string is just a key like this is telling you what
这里作为键的字符串就是用来告诉你

748
00:31:29,054 --> 00:31:32,422
the attribute is, like it's a font, or a color, or whatever.
这个属性叫什么，像是字体啊，颜色啊什么的

749
00:31:32,491 --> 00:31:33,723
And then the Any is,
然后这个 Any 是

750
00:31:33,792 --> 00:31:35,258
it might be a font, it might be a color,
可能是个字体或者颜色

751
00:31:35,327 --> 00:31:38,161
depends on what the key is, that's why it's an Any there,
取决于键是什么，这就是为什么这里是个 Any

752
00:31:38,230 --> 00:31:40,464
because it can be all kinds of things.
因为它可以是任意东西

753
00:31:40,532 --> 00:31:42,799
And really important to notice here is the range.
还有非常重要的一点事这里有个 range

754
00:31:42,868 --> 00:31:43,500
You see that range?
看到这个 range 没

755
00:31:43,568 --> 00:31:47,270
It's not range that I talked to you on Wednesday,
这不是我周三告诉你们的 Range

756
00:31:47,339 --> 00:31:48,938
it's NSRange.
这是 NSRange

757
00:31:49,007 --> 00:31:53,042
NSRange is an integer indexed range into that string,
NSRange 是那个富文本字符串

758
00:31:53,111 --> 00:31:55,512
that attributed string.
的整数索引范围

759
00:31:55,581 --> 00:31:57,881
Old style integer, not string.index.
索引是老样式的，通过整数，不是 String.Index

760
00:31:57,950 --> 00:32:01,117
So this makes for a lot of trouble when you're using
所以在 Swfit 中用富文本字符串

761
00:32:01,186 --> 00:32:03,653
attributed string in the Swift world.
会造成很多麻烦

762
00:32:03,722 --> 00:32:07,156
And my recommendation to you is that you use this method or
我的建议是用 String 类中

763
00:32:07,225 --> 00:32:09,792
this var rather on String called utf16.
叫做 utf16 的变量

764
00:32:09,861 --> 00:32:12,462
utf16 will give you back what's called
utf16 会返回你一个叫做

765
00:32:12,531 --> 00:32:14,197
a String.UTF16View.
String.UTF16View 的东西

766
00:32:14,265 --> 00:32:17,634
That is a collection of the characters, it's not really
它是一个字符的集合，但它不像

767
00:32:17,703 --> 00:32:21,304
a collection like characters is, but it is a representation
是 characters 那样的集合，它是代表这个

768
00:32:21,373 --> 00:32:24,975
of the string as distinct 16-bit Unicode characters.
字符串的每个十六位 Unicode 表示组成的集合

769
00:32:25,043 --> 00:32:27,510
Which is much more aligned, in fact I think it's exactly
它更接近于，事实上我觉得它

770
00:32:27,579 --> 00:32:30,280
aligned, to what NSString does.
和 NSString 是一样的

771
00:32:30,348 --> 00:32:32,616
The only problem is, that thing that it gets,
唯一的问题是，它得到的和返回的

772
00:32:32,684 --> 00:32:35,351
that comes back, is still indexed by String.Index.
仍旧是由 String.Index 来索引的

773
00:32:35,420 --> 00:32:38,588
So you have to say what's the startIndex, offset by five,
所以你必须说起始索引是什么，偏移 5

774
00:32:38,657 --> 00:32:41,124
that kind of business to move around in there.
之类的东西来定位

775
00:32:41,193 --> 00:32:44,093
And plus, you can't pass a range of String.Index into
另外，你不可以传递一个 String.Index 的 Range 到

776
00:32:44,162 --> 00:32:45,228
this setAttribute.
这个 setAttribute 里

777
00:32:45,297 --> 00:32:48,364
So you have to kinda convert from String.Index,
所以你必须从 String.Index

778
00:32:48,433 --> 00:32:50,466
how much you've advanced over,
把你想要的范围

779
00:32:50,535 --> 00:32:54,003
to an integer when you make these NSRanges.
转化到整形构成的 NSRange

780
00:32:54,072 --> 00:32:55,571
So, I'm sorry to say it's difficult.
我很遗憾地说这会很困难

781
00:32:55,640 --> 00:32:57,240
I'm not gonna actually ask you to do that,
我不会要求你们

782
00:32:57,308 --> 00:32:58,374
this in the homework.
这家庭作业里做这个

783
00:32:58,443 --> 00:33:00,176
Partially because it, it's kind of a pain in the neck.
一部分是因为这会有点痛苦

784
00:33:00,245 --> 00:33:02,445
And I don't want you to spend your valuable homework
同时我不想让你们把宝贵的作业时间

785
00:33:02,514 --> 00:33:03,179
time working on it.
都花费在这上面

786
00:33:03,248 --> 00:33:05,315
But just know, if you start using this,
但你要知道，如果要使用的话

787
00:33:05,384 --> 00:33:08,919
that you're gonna have this unfortunate disconnect.
不幸地这两个 API 是不一致的

788
00:33:08,987 --> 00:33:11,087
And I keep hoping every time iOS comes out,
当新的 iOS 版本发布的时候，我每次都希望

789
00:33:11,156 --> 00:33:13,723
they'll come out with an attributed string, not NS, but
他们会发布一个 AttributedString

790
00:33:13,792 --> 00:33:16,225
attributed string, that's matched up with string.
与 String 配对，而不是 NS

791
00:33:16,294 --> 00:33:18,161
But they haven't done it yet.
但是他们现在（Swift 4 之前）还没做到

792
00:33:18,230 --> 00:33:21,230
It's pretty complicated to do, I can imagine, so.
我能想象到那会很复杂

793
00:33:21,299 --> 00:33:23,600
So what are some of these attributes that you can set?
那么有哪些属性是你可以设置的呢？

794
00:33:23,668 --> 00:33:26,302
So there's things like NSForegroundColorAttributeN-
比如说 NSForegroundColorAttributeName

795
00:33:26,371 --> 00:33:28,471
ame, that's how you set the color of the text.
设置文本的颜色

796
00:33:28,540 --> 00:33:31,241
There's also NSBackgroundColorAttributeName
还有 NSBackgroundColorAttributeName

797
00:33:31,309 --> 00:33:34,343
which, fonts have foregrounds and backgrounds, but
也就是字体本身和底色

798
00:33:34,412 --> 00:33:35,612
don't worry about that too much.
别太担心这个

799
00:33:35,680 --> 00:33:36,413
NSStrokeWidth so
NSStrokeWidth 能

800
00:33:36,481 --> 00:33:39,082
you can draw your characters really thick or thin.
帮你把字母绘制成粗或细

801
00:33:39,150 --> 00:33:42,585
NSFontAttributeName, where you can provide a font.
NSFontAttributeName，可以设置字体

802
00:33:42,654 --> 00:33:44,187
And there's about 15 others,
大概还有 15 个别的一些属性

803
00:33:44,255 --> 00:33:46,957
and you can go look in the documentation for all of them.
你可以查看开发者文档

804
00:33:47,025 --> 00:33:48,024
But speaking of fonts,
但是说到字体

805
00:33:48,092 --> 00:33:50,259
if you wanna set the font you're gonna draw with,
如果你想设置你即将绘制的东西的字体的话

806
00:33:50,328 --> 00:33:51,127
how do you do that?
你如何做呢？

807
00:33:51,196 --> 00:33:54,297
Well, fonts are super important in iOS.
字体在 iOS 中非常重要

808
00:33:54,366 --> 00:33:57,100
Never underestimate the power of a font in building
永远别低估在创建一个酷酷的 UI 界面时

809
00:33:57,168 --> 00:33:58,001
a cool UI.
字体的力量

810
00:33:58,069 --> 00:33:58,935
Look at all these UIs.
看看这些 UI

811
00:33:59,004 --> 00:34:01,971
Look at how important the choice of font, size,
观察下这些字体的选择，尺寸，位置

812
00:34:02,040 --> 00:34:04,774
position, all that stuff is.
有多么重要

813
00:34:04,843 --> 00:34:08,377
So, how do we get a good font so that our UI will look good?
那么如何通过选择好字体来让 UI 看起来好一些呢？

814
00:34:08,446 --> 00:34:10,914
Well, we're gonna use this very important static
这就要用到这个非常重要的静态方法

815
00:34:10,983 --> 00:34:11,881
method in UIFont.
因为是属于 UIFont 类

816
00:34:11,950 --> 00:34:14,551
So you send this to UIFont, the class,
那么你把这个传给 UIFont

817
00:34:14,620 --> 00:34:17,720
called preferredFont forTextStyle, okay?
这个函数叫做 preferredFont(forTextStyle:)

818
00:34:17,789 --> 00:34:20,457
And so you can specify the text style, which is kind of
你可以指定文本样式，就像是

819
00:34:20,525 --> 00:34:23,360
like, what's the environment you're gonna use this text,
你讲要使用这个文本的环境

820
00:34:23,428 --> 00:34:25,461
what kinda text is it?
它是什么样子的文本

821
00:34:25,530 --> 00:34:28,531
And so there's about eight or so of them.
样式大概有八个

822
00:34:28,600 --> 00:34:30,300
But three of them are like a headline.
其中三个是 .headline 样式的

823
00:34:30,369 --> 00:34:31,334
This is gonna be a headline.
会是一个标题

824
00:34:31,402 --> 00:34:34,404
So that's gonna be a bolder font, a little larger maybe.
一个粗体文本，可能稍微大一些

825
00:34:34,473 --> 00:34:37,540
Then body font, that's like, this is the user's data.
然后是主字体（.body），就像是用户的数据

826
00:34:37,608 --> 00:34:38,575
So in a Mail message,
比如在一个邮件信息里

827
00:34:38,643 --> 00:34:41,110
this would be the message they're actually typing
这就可能是它们在里面敲入的信息

828
00:34:41,179 --> 00:34:43,346
maybe--although it's probably a multi-font.
虽然一般上都是多种字体的

829
00:34:43,414 --> 00:34:46,682
But, and then footnote would just be a small little text,
接下来是 .footnote ，也就是小一点的文本

830
00:34:46,751 --> 00:34:48,151
you see, from the bottom?
那种底部的那些文本那种

831
00:34:48,220 --> 00:34:51,121
So I really encourage you when you're using a font,
所以我非常鼓励你们当使用字体时

832
00:34:51,190 --> 00:34:53,756
try to find a text style that will work, okay?
找到一个适合的文本样式，好吗？

833
00:34:53,825 --> 00:34:55,291
Because it's gonna be in sync and
因为它会与其他 app

834
00:34:55,360 --> 00:34:57,060
compatible with all the other apps,
同步和兼容

835
00:34:57,128 --> 00:34:59,395
because they're using these preferred fonts.
因为它们都用这些首选字体

836
00:34:59,464 --> 00:35:02,132
And also, by the way, if a user goes in Settings and
另外顺带一提，如果一个用户进入设置并且

837
00:35:02,201 --> 00:35:04,367
sets their font size to be really large,
把他们的字体设置得非常大

838
00:35:04,436 --> 00:35:06,802
these will automatically get larger, okay?
这些都会自动变大，懂不？

839
00:35:06,871 --> 00:35:10,207
And, hopefully, if you have your Auto-Layout working,
另外，幸运的是，如果你有自动布局的话

840
00:35:10,275 --> 00:35:13,743
everything will expand or contract properly, okay?
每一样东西都会正确地伸缩，懂不？

841
00:35:13,812 --> 00:35:15,378
There's also system fonts.
当然也有一些系统字体

842
00:35:15,446 --> 00:35:17,580
Don't get confused between the preferred fonts and system fonts.
别被系统字体和首选字体弄混淆

843
00:35:17,649 --> 00:35:21,751
System fonts go on buttons and that.
系统提供的控件，比如按钮用的是 systemFont

844
00:35:21,819 --> 00:35:24,020
Preferred fonts are for the user's content.
首选字体是为用户的内容提供的

845
00:35:25,290 --> 00:35:28,157
So, that's the difference there.
这就是区别

846
00:35:28,226 --> 00:35:29,626
Now, most of this stuff, again,
另外，再一次的，大部分的这些东西

847
00:35:29,694 --> 00:35:31,160
you're not even gonna set in code.
你甚至不用用代码设置

848
00:35:31,229 --> 00:35:33,196
You're gonna set it in Interface Builder in
只要通过 Interface Builder 那个

849
00:35:33,264 --> 00:35:34,997
the little Inspector window, right?
小小的 Inspector 窗口上设置就好了

850
00:35:35,066 --> 00:35:37,700
You're gonna be setting, both preferred fonts and
首选字体和系统字体在那里

851
00:35:37,769 --> 00:35:39,736
system fonts can be set there.
都可以设置

852
00:35:39,804 --> 00:35:44,474
If you wanna use a specific font like Helvetica Bold 13
如果你想用一个特殊的字体，像是 13 号粗体 Helvetica 的话

853
00:35:44,543 --> 00:35:46,843
point, you can do that.
你可以这么做

854
00:35:46,911 --> 00:35:48,011
I don't recommend it,
虽然我不建议

855
00:35:48,079 --> 00:35:50,900
but UIFontDescriptor is an important class to know
但是 UIFontDescriptor 是一个重要的需要知道的类

856
00:35:50,901 --> 00:35:51,114
for that.
它是用来

857
00:35:51,183 --> 00:35:53,416
It's how you describe that font that you want,
描述你想要的字体

858
00:35:53,485 --> 00:35:54,417
that special font.
特殊的字体

859
00:35:54,486 --> 00:35:57,153
So, you know, some apps, typography is what they do.
就像你知道的，有一些程序是用来做版面设计的

860
00:35:57,222 --> 00:35:59,622
And so they need to be able to do specific fonts.
他们需要能够处理一些特殊的字体

861
00:35:59,691 --> 00:36:02,358
Alright, so that's text.
好，这就是文本的内容了

862
00:36:02,427 --> 00:36:03,993
How about drawing images?
那么如何绘制图片呢？

863
00:36:04,062 --> 00:36:06,829
So images, again, you, we have a thing like UILabel.
再一次的，我们有一个类似 UILabel 的类

864
00:36:06,898 --> 00:36:07,897
It's called UIImageView.
叫做 UIImageView

865
00:36:07,966 --> 00:36:10,033
And you could just make an image be a subview of
如果你想要放一张图片在那里的话

866
00:36:10,101 --> 00:36:12,369
your view if you wanted to have an image in there.
只要把 UIImageView 作为子视图就可以了

867
00:36:12,437 --> 00:36:15,171
But, again, sometimes you wanna be able to control that
但是，再一次的，有时候你想要

868
00:36:15,240 --> 00:36:17,373
in your draw, your drawRect.
在 draw(rect:) 中绘制图片

869
00:36:17,442 --> 00:36:19,742
And we do that with the UIImage object, okay?
我们就需要用到 UIImage 对象

870
00:36:19,811 --> 00:36:21,578
I already showed you actually when I was talking about
当我谈到可失败构造器时候

871
00:36:21,647 --> 00:36:23,846
failable initializers how to create a UIImage.
已经向你们展示了如何创建一个 UIImage

872
00:36:23,915 --> 00:36:27,016
You just put it in your xcassets file
你只要把图片放入你的 xcassets 文件里

873
00:36:27,084 --> 00:36:28,884
in Interface Builder.
在 Interface Builder 里就可以用了

874
00:36:28,953 --> 00:36:32,622
And then you say UIImage named, and it gets it by name.
也可以通过 UIImage(named: 图片名字) 来取得

875
00:36:32,691 --> 00:36:34,457
And if it can't find it, it returns nil.
如果找不到的话就返回 nil

876
00:36:34,526 --> 00:36:37,193
So that's the number one way you're gonna get an image into
这就是第一种方法

877
00:36:37,262 --> 00:36:38,661
your app is put it in xcassets.
把你的图片放入 xcassets 文件里

878
00:36:38,729 --> 00:36:39,863
But there are other ways to do it.
但还有另一种方法

879
00:36:39,931 --> 00:36:42,665
You can get it from a file, like if you had a .jpg file.
你可以从一个文件里取得，比如说你有一个 .jpg 文件

880
00:36:42,734 --> 00:36:44,800
Of course, I haven't shown you how to get files.
当然了，我还没向你们展示如何得到一个文件

881
00:36:44,869 --> 00:36:46,369
So you don't know how to do that yet.
所以现在你们还不知道如何做

882
00:36:46,438 --> 00:36:48,471
But, you can do it that way.
但是你们可以通过那种方式做

883
00:36:48,540 --> 00:36:51,240
And you can also get it just from raw data, raw jpg data or
你也可以从原始数据，原始 jpg 或者别的数据

884
00:36:51,309 --> 00:36:53,977
something that you got over the Internet or from a URL or
从网上一个 URL 或者别的什么中得到图片

885
00:36:54,046 --> 00:36:55,711
something, you can do that.
你可以这么做

886
00:36:55,780 --> 00:36:58,548
You can even do it by drawing with all those path things.
你甚至可以通过 UIBezierpath 来绘制

887
00:36:58,616 --> 00:37:01,150
You can use this UIGraphicsBeginImageContext
你可以用这个 UIGraphicsBeginImageContext

888
00:37:01,219 --> 00:37:02,652
for a certain size region.
给一个确定的尺寸区域

889
00:37:02,721 --> 00:37:05,188
And then you can just use UIBezierpath draw or
接下来你只要是用 UIBezierPath 绘制或得到一些

890
00:37:05,257 --> 00:37:08,191
get graphics context, whatever, draw in there.
图像内容，随便什么，画到那里

891
00:37:08,260 --> 00:37:10,960
And then there's an EndImageContext.
然后还有一个 EndImageContext

892
00:37:11,029 --> 00:37:13,396
And it'll capture it and create a little image for you.
它会抓取那个区域里面的内容然后创建一个小图像给你

893
00:37:13,465 --> 00:37:15,265
So that's another way to do it.
这就是另一种实现的方式了

894
00:37:15,333 --> 00:37:18,168
So once you have an image, okay, that you got from any of
那么一旦你有图片了，无论从何种来源得到的

895
00:37:18,236 --> 00:37:20,836
these sources, you can just draw it inside your drawRect
你只要在你的绘画区通过 draw(atPoint:) 或者 draw(inRect:)

896
00:37:20,905 --> 00:37:24,307
by saying draw atPoint or draw inRect.
来绘制就可以了

897
00:37:24,375 --> 00:37:28,878
Or actually, I think that's probably drawAt space point,
事实上，我觉得这个可能是 draw(at point:)

898
00:37:28,947 --> 00:37:30,546
not atPoint:.
而不是 draw(atPoint:)

899
00:37:30,615 --> 00:37:35,385
And drawIn space rect and drawAsPatternIn space rect.
还有 draw(in rect:) 和 drawAsPattern(in rect:)

900
00:37:35,454 --> 00:37:37,820
Those do kind of what you would think, right?
它们的功能和你想象的一样

901
00:37:37,889 --> 00:37:40,023
draw atPoint draws it where that's the upper left hand
draw(at point:) 会用 point 作为图片的左上角

902
00:37:40,092 --> 00:37:42,091
corner, it draws it in its natural size.
用默认的尺寸画出图片

903
00:37:42,160 --> 00:37:45,694
draw inRect is going to scale it to fit inside
draw(in rect:) 会缩放图片去适应

904
00:37:45,763 --> 00:37:48,164
the rectangle that you provide.
你提供的矩形

905
00:37:48,233 --> 00:37:50,332
And drawAsPattern is gonna tile it.
drawAsPattern 将会把图片铺满你提供的矩形

906
00:37:50,401 --> 00:37:52,067
So presumably that's a small image and
大概就像，你有一个小图片

907
00:37:52,136 --> 00:37:53,869
you're drawing a texture or something.
作为材质使用

908
00:37:53,938 --> 00:37:56,306
And it's gonna repeat it over and
然后用图片重复的去填充到

909
00:37:56,374 --> 00:37:59,342
over to fill the rectangle, okay?
矩形内部，直到填满

910
00:37:59,410 --> 00:38:01,110
I'll fix this slide and repost it.
我会改正幻灯片里的错误，之后重新发布一下

911
00:38:01,179 --> 00:38:05,748
Alright, one thing to be careful of with UIView.
在 UIView 里有一点需要特别注意

912
00:38:05,817 --> 00:38:07,917
When UIView changes size,
当 UIView 的尺寸改变时

913
00:38:07,986 --> 00:38:11,587
you do not get asked to redraw by default.
UIView 不会被默认重绘

914
00:38:11,656 --> 00:38:13,556
What it does is, believe it or
确实是这样，不管你相不相信

915
00:38:13,625 --> 00:38:17,293
not, takes what you've drawn, grabs the pixels, and
只是抓着你所绘制的像素

916
00:38:17,362 --> 00:38:20,229
stretches them to fit the new bounds.
然后直接拉伸他们去适应你的新区域

917
00:38:20,298 --> 00:38:22,465
Okay, now, this is often not what you want.
大多数情况下，你肯定不想要这样的结果

918
00:38:22,533 --> 00:38:24,667
Often, what you want is, okay, if my bounds change,
通常你想要的是，如果我的 bounds 变了

919
00:38:24,736 --> 00:38:28,170
ask me to redraw again in my new bounds, okay?
就通知我在新的区域重绘

920
00:38:28,239 --> 00:38:30,039
So how is this controlled?
怎么去控制，让它重绘呢？

921
00:38:30,108 --> 00:38:33,042
It's controlled via this var in UIView called contentMode.
通过 UIView 中叫做 contentMode 的变量去控制它

922
00:38:33,110 --> 00:38:36,245
And the contentMode can be things like left, right, top,
contentMode 的值是这样的：左，右，顶部

923
00:38:36,314 --> 00:38:38,014
bottom, topRight, topLeft.
底部，右上，左上

924
00:38:38,083 --> 00:38:40,150
That's basically saying, take my bits and
意思就是，你拿着我这些像素点

925
00:38:40,218 --> 00:38:42,618
shove them up into the left corner you know,
放到左下角去

926
00:38:42,687 --> 00:38:44,621
one of these spots, center or right.
或者放到中间或右边

927
00:38:44,690 --> 00:38:46,656
Don't touch, don't do anything with them,
不要碰，什么都别做

928
00:38:46,724 --> 00:38:48,123
just move them in the new bounds.
就把他们移动到新的区域就行了

929
00:38:48,192 --> 00:38:50,560
Well, that's likely to cut off what you've drawn or something
因此你所绘制的东西很有可能被截断

930
00:38:50,628 --> 00:38:52,928
like that depending on how much the bounds have changed.
具体取决于 bounds 变化了多少

931
00:38:52,997 --> 00:38:54,630
Like when you rotate, you know,
当你旋转的时候

932
00:38:54,699 --> 00:38:56,699
the bounds changes quite a bit.
边界的变化是很大的

933
00:38:56,768 --> 00:38:58,334
There's also the scaling ones.
还有的会缩放视图

934
00:38:58,403 --> 00:39:00,703
And this is the default, scaleToFill.
scaleToFill 是默认的处理方式

935
00:39:00,772 --> 00:39:03,873
And that says, take my bits and take my new bounds and
拿着现在的视图，通过拉伸

936
00:39:03,942 --> 00:39:05,241
scale it to fill.
去填充的新边界

937
00:39:05,310 --> 00:39:07,243
I can preserve the aspect ratio if I want.
如果我想的话，我也能保持宽高比

938
00:39:07,311 --> 00:39:08,044
Although, again,
但是

939
00:39:08,113 --> 00:39:10,079
that's probably gonna cut something off.
可能一部分内容会被截断，无法显示

940
00:39:10,148 --> 00:39:13,215
But the real one that you want is redraw.
但我们真正想要的是，重绘

941
00:39:13,284 --> 00:39:15,518
If you set your contentMode to be .redraw,
如果 contentMode 的值为 .redraw

942
00:39:15,587 --> 00:39:18,221
then when your bounds change, your draw is gonna be
当你的边界改变时，就会调用 draw

943
00:39:18,289 --> 00:39:22,892
called--your drawRect, draw with the rect argument.
调用 draw(rect:) ，用 rect 参数重绘

944
00:39:22,960 --> 00:39:25,194
So in your assignment three, you're gonna wanna do this.
在作业三中，你要的做就是重绘

945
00:39:25,263 --> 00:39:26,429
You can actually do this,
实际上你既可以

946
00:39:26,498 --> 00:39:28,264
you can do it in code by setting that var.
在代码中设置那个变量去实现重绘

947
00:39:28,332 --> 00:39:30,433
But you can also do it in Interface Builder, okay?
也可以在 Interface Builder 中去启用重绘

948
00:39:30,501 --> 00:39:32,569
In the Utilities window, in the Inspector preview.
在实用工具区域中的 Inspector （检查器）中

949
00:39:32,637 --> 00:39:35,905
Just, I think it's the very top one, contentMode.
我记得是最上面， 有 contentMode

950
00:39:35,974 --> 00:39:39,776
All right, so I'm, I'm gonna be leaving the slides here so
好的，这里先放一放

951
00:39:39,844 --> 00:39:42,245
I will tell you what's coming up.
我要告诉你们下边要做什么

952
00:39:42,313 --> 00:39:45,147
I'm gonna do this demo right now where I'm gonna do
我现在要做一个演示，我将会用

953
00:39:45,216 --> 00:39:48,084
a custom view, a FaceView, a UIView that draws a face.
一个自定义的视图, 一个 FaceView, 一个 UIView 来画一张脸

954
00:39:48,152 --> 00:39:50,920
And then Wednesday, I'm gonna talk about gestures.
下周三，我将会讲一下手势

955
00:39:50,988 --> 00:39:53,055
We'll add some gestures to control our face.
我将会添加一些手势来控制这张脸

956
00:39:53,124 --> 00:39:55,658
And I'm gonna start talking about multiple MVCs,
我将会讲一下多重 MVC

957
00:39:55,726 --> 00:39:58,794
I'll finish up with multiple MVCs next week.
我会在下周讲完多重 MVC

958
00:39:58,863 --> 00:40:01,964
Your assignment three requires you to do multiple MVCs, so
作业三需要用到多重 MVC

959
00:40:02,033 --> 00:40:04,500
I'm not going to make it due until a week from next Monday,
作业不会在下周一前到期

960
00:40:04,569 --> 00:40:06,802
because you'll need next Monday's lecture.
你们需要下周一课程的知识

961
00:40:06,871 --> 00:40:10,306
However, I'll probably ship the assignment, the write-up,
不过，我可能会在周三发写作作业

962
00:40:10,375 --> 00:40:12,909
on Wednesday, because a big part of that assignment
因为作业很大的一部分是

963
00:40:12,977 --> 00:40:15,478
is drawing your own custom view and you'll certainly know
绘制自定义视图，所以你马上就能知道

964
00:40:15,547 --> 00:40:18,080
everything you need to know to do that right off the bat.
所需要理解的内容，然后立刻开始了

965
00:40:18,149 --> 00:40:19,983
So you can kind of get started on the view, and
你现在可以开始着手视图了

966
00:40:20,051 --> 00:40:22,418
then next Monday, you can start doing the multiple MVCs.
下周一你就能够做多重 MVC 了

967
00:40:22,486 --> 00:40:25,354
And you'll still have a full week until the next Monday,
直到下周一之前，你们仍有一整周的时间

968
00:40:25,423 --> 00:40:27,156
to get that done, alright.
去完成它

969
00:40:27,225 --> 00:40:28,858
No Friday section this week.
本周没有周五的课程了

970
00:40:30,061 --> 00:40:33,562
Okay, so as with most demos in this course,
这节课几乎全部是演示

971
00:40:33,631 --> 00:40:36,666
I'm going to start from scratch, okay.
好的，我要从头开始了

972
00:40:36,735 --> 00:40:38,101
We're going to do a completely new app.
我们要做一个新的完整的 app

973
00:40:38,170 --> 00:40:39,836
No more calculator in here.
不再是计算器了

974
00:40:39,905 --> 00:40:41,603
So I could click on here to open my calculator.
我可以按这里来打开我的计算器

975
00:40:41,672 --> 00:40:45,508
But instead, I'm gonna go back here to Create a new project.
取而代之的，我们将要回到这里重新创建一个新的项目

976
00:40:45,576 --> 00:40:47,576
Okay, it's gonna be Single View Application,
Okay，就像我和你们说的选单视图应用

977
00:40:47,645 --> 00:40:48,877
as I told you they all would be.
这都应该选 Single View Application

978
00:40:48,946 --> 00:40:51,747
I'm gonna call this one FaceIt, okay.
我们把它叫做 FaceIt

979
00:40:51,816 --> 00:40:53,449
And it's gonna start out just drawing a face, but
我们只绘制一张脸，但是

980
00:40:53,517 --> 00:40:55,184
it's gonna do much more eventually.
以后他会有更多功能

981
00:40:55,253 --> 00:40:58,654
And, still no core data or testing stuff yet, so
仍然没有 Core Data 或者测试的部分

982
00:40:58,723 --> 00:41:00,790
I'm just gonna do FaceIt here.
那么，我们现在就开始做 FaceIt 吧

983
00:41:00,859 --> 00:41:02,191
It's gonna say where do you want it?
Xcode 会询问你想把它放在哪

984
00:41:02,260 --> 00:41:04,360
I'm gonna put it in the same place the calculator is,
我要把它和计算器放在同一个地方，

985
00:41:04,428 --> 00:41:05,094
in my Developer.
在我的 Developer 文件夹里

986
00:41:05,163 --> 00:41:06,228
I'm not gonna be using SCM.
我不会用 SCM (Source Code Management)

987
00:41:06,297 --> 00:41:06,963
But of course,
当然

988
00:41:07,032 --> 00:41:09,165
those of you come who came to Friday section,
你们当中上过周五课程的

989
00:41:09,234 --> 00:41:10,633
you'll know how to use that.
会知道如何使用它

990
00:41:10,702 --> 00:41:13,603
And here is my new app here.
这是我的新 app

991
00:41:13,671 --> 00:41:15,538
And I'm also going to do my standard thing,
我将要做我每次都做的事了

992
00:41:15,607 --> 00:41:17,706
where I'm gonna take these supporting files and
我要把这些支持文件

993
00:41:17,775 --> 00:41:18,841
move them out of our way.
打包放到 Supporting Files

994
00:41:18,910 --> 00:41:22,444
So they don't distract us every time we look at
这样每次我们看导航器的时候

995
00:41:22,513 --> 00:41:24,513
the Navigator here.
他们就不会打扰我们了

996
00:41:24,582 --> 00:41:27,783
Because we don't need those for this demo.
因为这次的演示根本不需要这些东西

997
00:41:27,852 --> 00:41:32,154
So just like every other thing we've done, we have a view.
就像我们原来做的，我们现在有一个视图

998
00:41:32,223 --> 00:41:35,324
Here's our story board with our view.
这是我们视图的 Storyboard （故事板）

999
00:41:35,392 --> 00:41:37,393
Oops, not that small.
哦，不用这么小

1000
00:41:37,462 --> 00:41:39,862
And of course, we have our controller.
当然，我们还有控制器

1001
00:41:39,931 --> 00:41:41,530
And I'm gonna delete this out of the controller,
我要像往常一样

1002
00:41:41,599 --> 00:41:43,800
as usual here.
把这些都删除了

1003
00:41:43,868 --> 00:41:47,303
And this time, we're going to start right off here
这次，我们要从这里开始

1004
00:41:47,372 --> 00:41:50,539
by building a custom UIView, custom UIView subclass.
创建一个自定义的 UIView，自定义的 UIView 子类

1005
00:41:50,608 --> 00:41:52,274
Now, the way we do that is the saw way we built
现在，我们就像创建 CalculatorBrain 一样

1006
00:41:52,343 --> 00:41:53,176
the CalculatorBrain.
去创建它就可以了

1007
00:41:53,245 --> 00:41:54,811
We go here, new file, right.
通过菜单栏的 New > File 新建文件

1008
00:41:54,879 --> 00:41:58,714
That's how we add new files to our project.
这样会向我们的项目中添加一个新文件

1009
00:41:58,783 --> 00:41:59,716
But this time, for
创建 CalculatorBrain 时

1010
00:41:59,784 --> 00:42:02,985
CalculatorBrain we chose Swift File because it, you know,
我们选择为 Swift File，原因你知道的

1011
00:42:03,053 --> 00:42:04,186
it wasn't a UI thing.
它不是一个 UI 组件

1012
00:42:04,255 --> 00:42:06,288
It didn't inherit from any iOS class.
它不继承自任何 iOS 类

1013
00:42:06,357 --> 00:42:09,391
But now we're gonna choose Cocoa Touch Class, because
但这次，我们要选 Cocoa Touch Class，因为

1014
00:42:09,460 --> 00:42:12,461
it's gonna be a subclass of a Cocoa Touch UIKit class.
它将是 Cocoa Touch UIKit 类的子类

1015
00:42:12,530 --> 00:42:13,463
So we click that.
我们点击它

1016
00:42:13,531 --> 00:42:16,165
It says, what do you want it to be a subclass of?
它说了，你想要他做谁的子类？

1017
00:42:16,234 --> 00:42:18,401
And we want UIView, but you can see there's other things.
我们想要的是 UIView，但是我们也看到了其他的东西

1018
00:42:18,469 --> 00:42:19,902
UIViewController, and
UIViewController 和

1019
00:42:19,971 --> 00:42:21,337
other things that we'll learn later in the quarter.
其他我会在课程后段去讲的东西

1020
00:42:21,405 --> 00:42:23,673
But this is a subclass of UIView.
但这个是一个 UIView 的子类

1021
00:42:23,742 --> 00:42:25,607
I'm gonna call it FaceView,
我把它叫做 FaceView

1022
00:42:25,676 --> 00:42:28,177
because it's a view that draws a face.
因为它是绘制一张脸的视图

1023
00:42:28,246 --> 00:42:29,912
Okay, it's a good name.
好，这是个好名字

1024
00:42:29,981 --> 00:42:31,714
Alright, so we click here.
然后，我们点这里

1025
00:42:31,782 --> 00:42:33,382
It says, where do you wanna put it?
它说，你想把它放在哪里？

1026
00:42:33,451 --> 00:42:35,618
We usually wanna be very careful to put it in the same
我们通常特别小心，要把它像其他文件一样

1027
00:42:35,687 --> 00:42:37,052
place as everything else is.
放在同一个位置

1028
00:42:37,121 --> 00:42:38,521
You don't want it in Supporting Files, and
你不会想把它放到 Supporting Files 里

1029
00:42:38,589 --> 00:42:40,422
you don't want it at this top level, the project level.
你不会想把它放在顶级目录也就是项目目录

1030
00:42:40,491 --> 00:42:42,858
You want it inside this folder right here,
你应该把它放到这个文件夹里

1031
00:42:42,927 --> 00:42:44,560
that has all your stuff in it.
这里有你所有的东西

1032
00:42:44,629 --> 00:42:46,462
So we'll do that.
那么我们就这么做

1033
00:42:46,531 --> 00:42:48,397
Alright, so here's our FaceView.
好了，这就是我们的 FaceView

1034
00:42:48,466 --> 00:42:51,567
And you can see right off the bat in FaceView, we get this.
在 FaceView 中，你立刻就能看到

1035
00:42:51,636 --> 00:42:54,970
Which is our draw, okay, the draw with the rect.
我们的绘制方法，draw(_ rect:)

1036
00:42:55,039 --> 00:42:57,340
Notice that it is commented out.
注意，这里是被注释的

1037
00:42:57,408 --> 00:42:59,041
And that's because for
那是因为

1038
00:42:59,110 --> 00:43:03,145
performance reasons, iOS doesn't want to ask views that
性能的原因，iOS 不会让

1039
00:43:03,214 --> 00:43:05,214
don't actually do any drawing, to draw.
实际上不会做任何绘制的视图去绘制

1040
00:43:05,283 --> 00:43:06,816
Because it has to keep a backing store for
否则 iOS 需要分配后端存储

1041
00:43:06,884 --> 00:43:09,818
them, and there's memory stores and all this stuff.
以及内存来存储所有这些东西

1042
00:43:09,887 --> 00:43:11,921
So by default this comes commented out.
所以这些默认会被注释掉

1043
00:43:11,989 --> 00:43:13,956
But of course, our FaceView is going to draw.
当然，我们的 FaceView 会去绘制

1044
00:43:14,025 --> 00:43:15,458
It's going to draw a face.
它要绘制一张脸

1045
00:43:15,527 --> 00:43:18,227
So we're going to un-comment it out.
我们要取消这个注释

1046
00:43:19,396 --> 00:43:22,331
Okay, now we have a FaceView here,
好了，我们现在有 FaceView 了

1047
00:43:22,400 --> 00:43:23,432
it doesn't draw anything.
它现在什么也不绘制

1048
00:43:23,501 --> 00:43:26,803
But I actually wanna briefly go back to our storyboard, and
让我们回到我们的 Storyboard

1049
00:43:26,871 --> 00:43:28,938
put a FaceView in the storyboard.
把 FaceView 放到 Storyboard 里

1050
00:43:29,007 --> 00:43:32,875
And it's really simple but I want to show it to you.
虽然很简单，但是我还是想演示给你们

1051
00:43:32,943 --> 00:43:33,976
if we go down to the Object Palette at the bottom here,
现在看一下下方的 Object Palette （对象库）

1052
00:43:33,977 --> 00:43:35,010
And again,
然后

1053
00:43:35,080 --> 00:43:36,512
where we got our buttons and
这里有我们的按钮和标签

1054
00:43:36,580 --> 00:43:38,481
labels, you know I could search here forever.
但就算我们永远在这里找

1055
00:43:38,550 --> 00:43:40,316
There's no FaceView in here.
这里就是没有 FaceView 啊

1056
00:43:40,385 --> 00:43:43,252
But I can go down towards the bottom here, and
但让我们看下边

1057
00:43:43,320 --> 00:43:44,420
you will see this one.
你会看到这个

1058
00:43:44,489 --> 00:43:47,023
It's actually almost at the very bottom, it's View.
这几乎是最下边了，这是个 View （视图）

1059
00:43:47,091 --> 00:43:49,291
See, it represents a rectangular region which draws
看，它代表一个矩形区域

1060
00:43:49,360 --> 00:43:51,293
and receives events, as promised.
矩形区域会按照约定去绘制和接受事件

1061
00:43:51,362 --> 00:43:54,063
And so I can pick this guy up and drag him out.
我可以选中这家伙，把它拽出来

1062
00:43:54,132 --> 00:43:58,568
Okay, and drop him here inside this view controller.
好了，把它拽到视图控制器里

1063
00:43:58,636 --> 00:44:00,402
And remember that the top level view in this view
记住，顶层视图是这个视图控制器里

1064
00:44:00,471 --> 00:44:02,738
controller is a var called view.
的一个叫做 view 的变量

1065
00:44:02,807 --> 00:44:04,807
Okay, a very important var.
嗯，很重要的一个变量

1066
00:44:04,876 --> 00:44:08,010
Now, I want this view to fill the whole space.
现在，我想让这个视图填充所有的空白部分

1067
00:44:08,079 --> 00:44:11,314
So I'm actually gonna use the blue dash lines to
事实上，我要用到这些蓝色的虚线去

1068
00:44:11,382 --> 00:44:15,518
make this thing fit the entire space, you see that?
让这个视图去填充所有的空白，看到了吗？

1069
00:44:15,586 --> 00:44:18,988
Now, well, I also want to do the Ctrl-dragging to
好了，我还要按住 control 键，然后拖拽到这个边缘

1070
00:44:19,056 --> 00:44:21,590
the edges that we did in calculator, remember that?
就像我们做计算器时做过的一样，记得吗？

1071
00:44:21,659 --> 00:44:23,992
But it's actually kind of hard to do this because I want it
事实上这么做真的有点难，因为我想它

1072
00:44:24,061 --> 00:44:25,795
all the way to the edges.
整个贴近边缘

1073
00:44:25,863 --> 00:44:29,131
But since I used the blue lines, I can use a really cool
但我用蓝色虚线了，我能用下边这个

1074
00:44:29,200 --> 00:44:31,067
feature which is down here, this button.
非常酷的特性，这个按钮

1075
00:44:31,135 --> 00:44:33,068
You see this button in the lower right here?
看到这个右下方的“解决自动布局问题”按钮了吗？

1076
00:44:33,137 --> 00:44:34,603
It says Resolve Auto Layout Issues.
它说 Resolve Auto Layout Issues

1077
00:44:34,672 --> 00:44:35,705
If you click that,
如果你点击它

1078
00:44:35,773 --> 00:44:39,942
one of the choices is to Reset to Suggested Constraints.
其中一个选项是 Reset to Suggested Constraints

1079
00:44:40,011 --> 00:44:43,779
So that is the system saying, I'll make your constraints for
那就是说系统在说，我会根据你对齐的蓝色虚线

1080
00:44:43,848 --> 00:44:45,914
you based on what you did with the blue lines.
为你重设至建议约束

1081
00:44:45,983 --> 00:44:47,483
So I'm gonna look at your blue lines.
系统会看看蓝色虚线

1082
00:44:47,552 --> 00:44:49,752
Since I used blue lines all at the edges,
因为所有边缘我都用到蓝色虚线了

1083
00:44:49,821 --> 00:44:52,354
if I say Reset to Suggested Constraints,
如果我说 重设至建议约束

1084
00:44:52,423 --> 00:44:54,957
it's gonna hook those things to the edges.
他就会把这些固定到边缘

1085
00:44:55,026 --> 00:44:56,592
Because that's what it looked I wanted.
因为那看起来就是我想要的

1086
00:44:56,661 --> 00:45:00,128
Now I can double-check what it gave me by clicking here on
现在我要确认下，点这里

1087
00:45:00,197 --> 00:45:01,730
the Size Inspector.
Size Inspector （尺寸检查器）

1088
00:45:01,799 --> 00:45:02,998
And if you look down towards the bottom of
如果你看尺寸检查器下边

1089
00:45:03,067 --> 00:45:05,400
the Size Inspector, you can see all your constraints.
你会看见你的所有约束

1090
00:45:05,469 --> 00:45:07,536
And look at that, perfect Trailing Space to Superview,
看看，完美，尾部到父视图间距的约束

1091
00:45:07,605 --> 00:45:08,738
Leading Space to Superview.
前部到父视图间距的约束

1092
00:45:08,806 --> 00:45:10,640
Excellent, all exactly what I want.
太棒了，这就是我要的

1093
00:45:10,708 --> 00:45:13,943
So here, I've gotten all my Auto-Layout with one click.
这里，我通过一次点击就获得我全部的自动布局

1094
00:45:14,011 --> 00:45:16,412
And that's going to be possible to do quite a bit.
而且可能还能做得更多

1095
00:45:16,481 --> 00:45:17,846
If you use those blue lines and
如果你用这些蓝色虚线

1096
00:45:17,915 --> 00:45:19,882
you say Reset to Suggested Constraints,
你说，重设至建议约束

1097
00:45:19,951 --> 00:45:21,617
often it'll at least get close.
基本上，我们就已经很接近了

1098
00:45:21,686 --> 00:45:24,987
And then you can kinda tweak the ones it didn't get right.
如果还没达到预期，你可以调整这里

1099
00:45:25,056 --> 00:45:27,656
Now, the other crucial thing I have to do here
我现在要做的另一件重要的事情是

1100
00:45:27,725 --> 00:45:30,559
is that this is currently a UIView.
这目前是 UIView

1101
00:45:30,628 --> 00:45:33,496
If I go over here to this inspector here,
看一下 Inspector（检查器）这里

1102
00:45:33,564 --> 00:45:37,299
which is the Identity Inspector, you can see that
这个 Identity Inspector

1103
00:45:37,368 --> 00:45:41,637
the class of the selected thing is UIView.
你会发现，选择的类是 UIView

1104
00:45:41,706 --> 00:45:43,372
So no matter what I put in my draw,
所以无论我放什么在我的绘制方法里

1105
00:45:43,441 --> 00:45:44,406
it would never be called.
它永远都不会被调用

1106
00:45:44,475 --> 00:45:47,476
Because this is not a FaceView, it's a UIView.
因为这不是 FaceView，它是一个 UIView

1107
00:45:47,545 --> 00:45:51,847
But I can just click here, and go down and choose FaceView.
但是我可以点这里，拉到下边选择 FaceView

1108
00:45:51,915 --> 00:45:55,518
And now I've made this a FaceView.
现在，我已经让他成为一个 FaceView 了

1109
00:45:55,586 --> 00:45:57,119
So now, all the code I put in my draw 
现在，我放在绘制方法里的所有代码

1110
00:45:57,120 --> 00:45:58,653
is going to draw in here.
都将在这里绘制出来

1111
00:45:58,723 --> 00:45:59,488
And that's it,
搞定了

1112
00:45:59,556 --> 00:46:02,158
that's all I need to do to put a custom view into my UI.
这就是我要在我的 UI 里添加自定义视图所要做的全部了

1113
00:46:02,226 --> 00:46:03,825
It's very common to want to put a custom view
在 UI 中使用自定义视图

1114
00:46:03,894 --> 00:46:04,426
in, in the UI.
是很平常的

1115
00:46:04,495 --> 00:46:07,830
So that's why it's so simple to do.
所以它做起来如此的简单

1116
00:46:07,899 --> 00:46:11,767
Now all we need to do here is in our FaceView,
我们接下来要在 FaceView 中

1117
00:46:11,836 --> 00:46:14,636
write the code that draws--draws our face.
写代码，绘制我们的脸了

1118
00:46:14,705 --> 00:46:16,538
So what are we gonna do to draw a face?
那么我们怎么来绘制一张脸呢？

1119
00:46:16,607 --> 00:46:20,243
Well, I'm just gonna draw the kind of emoji face, this round
我们将绘制一个类似表情符号（emoji）的脸

1120
00:46:20,311 --> 00:46:23,779
circle for a head, two round eyes, a little smile.
圆作为头，两个圆作为眼睛，再来点微笑

1121
00:46:23,848 --> 00:46:25,614
Okay, a very simple face.
一张很简单的脸

1122
00:46:25,682 --> 00:46:28,584
And, let's start by drawing the skull of our face, the,
我们先画脸的轮廓

1123
00:46:28,653 --> 00:46:30,253
kind of the head of this face.
这张脸的头部

1124
00:46:31,556 --> 00:46:33,456
And I just start doing that in draw here.
我在 draw 方法里开始画

1125
00:46:33,524 --> 00:46:36,758
I'm going to use UIBezierPath to do all this.
我们用 UIBezierPath 来画这些

1126
00:46:36,827 --> 00:46:39,528
So I don't actually even need to get the context.
我都不需要上下文

1127
00:46:39,597 --> 00:46:41,864
That UI get graphics, get context, don't even do that.
不需要 UIGraphicsGetCurrentContext

1128
00:46:41,933 --> 00:46:43,499
Just use UIBezierPath automatically
就用 UIBezierPath，它就会

1129
00:46:43,568 --> 00:46:44,833
knows what context you're in.
自动知道你的上下文

1130
00:46:44,902 --> 00:46:46,902
So you don't have to do any of that.
所以其他什么你都不用去做

1131
00:46:46,971 --> 00:46:48,637
So what do I need to do though?
我们接下来干什么呢？

1132
00:46:48,706 --> 00:46:51,874
I need to kind of think of how big my face is.
我需要考虑一下这张脸要多大

1133
00:46:51,942 --> 00:46:54,543
I want my face, if I'm in portrait or landscape, I also
我想要我的脸适应竖屏和横屏

1134
00:46:54,611 --> 00:46:57,613
want my face to kind of be the smaller of the two sides,
我想让脸取两边最小值

1135
00:46:57,682 --> 00:46:58,481
the height or the width.
高度和宽度的最小值

1136
00:46:58,549 --> 00:46:59,248
You know what I mean?
你们知道我的意思吗？

1137
00:46:59,317 --> 00:47:02,451
Because I always want the face to fully fit in there.
我想让脸去完整的填充这里

1138
00:47:02,519 --> 00:47:06,522
So I'm going to let my skullRadius, so that's gonna
我要让 skullRadius，这就是我

1139
00:47:06,590 --> 00:47:10,559
be the radius of my skull, okay, equal the minimum.
头的半径，等于两个中的最小值

1140
00:47:10,628 --> 00:47:11,927
And there's this nice min,
这正好有个 min

1141
00:47:11,996 --> 00:47:14,129
you see that min function right there?
这个求最小值的 min 函数，对吧？

1142
00:47:14,198 --> 00:47:16,799
It's generic-typed like an array.
像数组一样，使用了范型

1143
00:47:16,868 --> 00:47:18,200
Array of T, so that's t he T.
像数组的 T 一样，这里的 T

1144
00:47:18,268 --> 00:47:19,368
It will take any type.
他可以是任意的类型

1145
00:47:19,437 --> 00:47:20,836
And it will compare two things, and
这个函数会比较两样东西，然后

1146
00:47:20,905 --> 00:47:22,572
return the one that's the lowest.
返回最小的那个

1147
00:47:22,640 --> 00:47:25,808
So I'm going to get the minimum of my bound,
我要获取边界宽和高的最小值

1148
00:47:25,876 --> 00:47:30,412
bounds.size.width and my bounds.size.height.
bounds.size.width 和 bounds.size.height

1149
00:47:30,481 --> 00:47:32,814
And then I'm going to divide it by 2, because it's radius,
然后除以 2，因为是半径

1150
00:47:32,883 --> 00:47:33,915
not diameter.
而不是直径

1151
00:47:33,984 --> 00:47:35,618
So now, see what I'm doing here?
看看我做了什么？

1152
00:47:35,686 --> 00:47:38,954
I'm just making it so that my radius of my skull will be
我这么做，是为了我头的半径会变得

1153
00:47:39,023 --> 00:47:41,424
smaller of the width or height.
和高度和宽度中最小的一样

1154
00:47:41,492 --> 00:47:43,392
And then, what about where I want the skull to be?
我要把这个头放到哪呢

1155
00:47:43,461 --> 00:47:44,860
Well, I want it to be right in the center.
我就把它放在中间

1156
00:47:44,929 --> 00:47:51,700
So can I say, let skullCenter equal my center?
那我能说，让头中央等于我的中心吗？

1157
00:47:51,769 --> 00:47:53,736
Okay, that's a method, can I say that?
那是一个方法，我能那样说吗？

1158
00:47:53,805 --> 00:47:55,838
That's a var, anything wrong with that?
那是一个变量，有什么不对吗？

1159
00:47:55,906 --> 00:47:58,241
No, I see shaking heads--why not, what's wrong with that?
不，我看到有摇头的了，为什么不行呢，哪里错了？

1160
00:48:00,511 --> 00:48:01,077
Yeah?
恩？

1161
00:48:04,215 --> 00:48:07,483
He says because it'll start from the top left.
这位同学说因为坐标会从左上方开始

1162
00:48:07,551 --> 00:48:08,684
Not quite.
不全对

1163
00:48:08,753 --> 00:48:10,419
Anyone else wanna take a stab at this one?
还有谁想说说吗？

1164
00:48:12,490 --> 00:48:16,558
It's because center, while it is the center of this view,
那是因为中心，虽然是视图的中心

1165
00:48:16,627 --> 00:48:18,995
it's in the wrong coordinate system.
但在错误的坐标系统

1166
00:48:19,063 --> 00:48:21,330
This center is in my superview's coordinate system
这个中心是我的父视图的坐标系统

1167
00:48:21,398 --> 00:48:22,464
and I'm in draw.
我在 draw 方法里

1168
00:48:22,533 --> 00:48:24,099
I need to be in my coordinate system.
我需要在我自己的坐标系统里

1169
00:48:24,168 --> 00:48:26,268
So there's actually two things I can do here.
这里我有两种解决方案

1170
00:48:26,336 --> 00:48:28,804
One I could use this cool function in view called
其一，我可以用这个视图中叫

1171
00:48:28,872 --> 00:48:31,640
convert which will convert a point
convert 的酷方法，它会把一个点

1172
00:48:31,709 --> 00:48:33,509
from one coordinate system to another.
从一个坐标系统转换到另一个坐标系统

1173
00:48:33,577 --> 00:48:37,045
So I can go down to this one okay,
我要用这个

1174
00:48:37,114 --> 00:48:39,481
convert CGPoint from view, and
从 view 转换 CGPoint

1175
00:48:39,550 --> 00:48:44,353
I could convert this point center from my superview.
我能转换父视图的中心

1176
00:48:46,290 --> 00:48:48,423
Okay, so just using center I can convert it.
好了，这样就能用我转换的中心了

1177
00:48:48,492 --> 00:48:51,526
That would be fine, because I've converted it from one
那很好，我可以把一个点从

1178
00:48:51,595 --> 00:48:53,462
coordinate system, my superviews, to mine.
一个坐标系统，即父视图的，转换到我的坐标系统

1179
00:48:55,032 --> 00:48:56,298
That's probably a little,
这代码读起来

1180
00:48:56,366 --> 00:48:57,733
someone reading this code is like,
有点像这种感觉

1181
00:48:57,802 --> 00:48:59,135
hm, why are they doing that?
恩，为什么这么做？

1182
00:48:59,203 --> 00:49:03,505
A simpler way to do it is probably just to create
一个简单的解决方案可能是创建一个点

1183
00:49:03,574 --> 00:49:08,944
a point, a CGPoint, that is my bounds midX, that's my
一个 CGPoint，我 bounds.midX，那是

1184
00:49:09,013 --> 00:49:14,850
middle X, see, that's a rect thing, and my bounds midY.
横坐标的中点（这是 CGRect 的属性），bounds.midY

1185
00:49:14,919 --> 00:49:17,453
Okay. That makes sense?
好了

1186
00:49:17,521 --> 00:49:18,687
So I'm just creating the point
我只是创建了

1187
00:49:18,688 --> 00:49:19,854
that is the center,
一个在中心的点

1188
00:49:19,923 --> 00:49:22,525
much more straightforwardly there.
更简单而已

1189
00:49:22,593 --> 00:49:24,860
All right, so now I have my radius and the center.
我现在有半径和中心点了

1190
00:49:24,929 --> 00:49:26,494
Now I need to draw a circle.
我需要绘制一个圆

1191
00:49:26,563 --> 00:49:27,629
So how do I draw a circle?
怎么绘制一个圆呢？

1192
00:49:27,698 --> 00:49:29,865
I'm gonna do that with UIBezierPath.
我将用 UIBezierPath 来实现

1193
00:49:29,934 --> 00:49:33,002
So I'm gonna say let path equal a UIBezierPath.
我要说让路径等于一个 UIBezierPath

1194
00:49:33,071 --> 00:49:34,836
Now, when we look at the constructors for
好了，我们来看看 UIBezierPath 的构造器

1195
00:49:34,905 --> 00:49:38,807
UIBezierPath here you can see that we can draw an arc.
这里，我们可以画一个弧线

1196
00:49:38,876 --> 00:49:40,342
Which is actually what I'm going to use.
这就是我要用的

1197
00:49:40,411 --> 00:49:42,611
We could draw an oval, which would be cool,
我可以画一个椭圆，这会很酷

1198
00:49:42,679 --> 00:49:44,346
except the argument is a rect, and
除了参数其实是一个矩形

1199
00:49:44,414 --> 00:49:45,614
I have the center and the radius.
但我只有中心点和半径

1200
00:49:45,682 --> 00:49:47,983
So I can't, I don't really want to use oval.
所以我不能画椭圆

1201
00:49:48,052 --> 00:49:48,984
We could draw a rectangle.
我们也能画一个矩形

1202
00:49:49,052 --> 00:49:51,186
I want a circle, so that's no good.
我想要一个圆，所以不能用这个构造器

1203
00:49:51,255 --> 00:49:52,121
Or a rounded rect.
或者一个圆角的矩形

1204
00:49:52,190 --> 00:49:53,355
I actually want the circle,
事实上我想要一个圆

1205
00:49:53,423 --> 00:49:55,090
not a rectangle of any kind, okay?
不是一个像这样的矩形

1206
00:49:55,158 --> 00:49:57,560
So I'm gonna use this one right here which draws an arc.
我将用这里的这个画一个弧形

1207
00:49:57,628 --> 00:50:01,263
It just takes a center point and it draws a sweeping arc.
只需要一个中心点，它就能画一个完整的弧线

1208
00:50:01,332 --> 00:50:03,966
And I'm gonna draw this arc all the way around
我将这么画所有周围的弧线

1209
00:50:04,035 --> 00:50:06,101
to make a circle, okay?
来画一个圆

1210
00:50:06,169 --> 00:50:06,835
So how does that work?
能行吗？

1211
00:50:06,904 --> 00:50:09,070
Here, I'm gonna make some more space.
我们把这里调大点

1212
00:50:09,139 --> 00:50:11,807
All right, so it wants to know the center of the arc.
他想知道弧线的中心

1213
00:50:11,876 --> 00:50:14,309
Well, that's my skullCenter, right?
那就是我头的中心, skullCenter

1214
00:50:14,378 --> 00:50:16,478
It wants to know the radius of the arc, well,
他想知道弧线的半径

1215
00:50:16,547 --> 00:50:19,080
that's my skullRadius, this easy.
这就是我头的半径 skullRadius，这很简单

1216
00:50:19,149 --> 00:50:20,749
It wants to know the start angle.
他想知道初始角度

1217
00:50:20,817 --> 00:50:24,052
So that's the angle that it's gonna start sweeping.
这就是我们开始的角度

1218
00:50:24,121 --> 00:50:24,920
I'm gonna choose 0,
我要选 0

1219
00:50:24,989 --> 00:50:30,526
the angle 0 is straight out to your right.
0 度直指你的右侧

1220
00:50:31,662 --> 00:50:32,861
Okay, so if you're looking at the screen,
好了，如果你看下屏幕

1221
00:50:32,930 --> 00:50:35,830
to the right straight across, that's 0.
指向右边水平角，那是 0 度

1222
00:50:35,899 --> 00:50:37,099
And it's in radians,
那是弧度

1223
00:50:37,167 --> 00:50:40,235
how many people know what radians are to measure angle?
有多少人知道用弧度来测量角度

1224
00:50:40,304 --> 00:50:41,269
Okay most of you.
大多数都知道

1225
00:50:41,338 --> 00:50:43,138
So radians instead of degrees,
弧度来代替度数

1226
00:50:43,207 --> 00:50:45,908
we measure how much we're going up by radians.
我们来测量我们需要多少弧度

1227
00:50:45,976 --> 00:50:49,244
Radians go from zero all the way around to two pi.
弧度从 0 到 2π

1228
00:50:49,313 --> 00:50:50,412
Around the circle.
围成一个圆

1229
00:50:50,481 --> 00:50:53,949
Start at zero and then it will go around, pi over two,
从 0 开始，然后 π/2

1230
00:50:54,018 --> 00:50:56,852
pi, you know, then pi is 180 degrees and
π，你知道的，代表 180 度

1231
00:50:56,921 --> 00:50:59,521
then around to two pi is 360 degrees.
最后到 2π，360 度

1232
00:50:59,590 --> 00:51:02,191
So it's in radians, so this end angle has to be in radians
这是弧度，这个结束的角度应该是弧度

1233
00:51:02,259 --> 00:51:03,592
and I wanna go all the way around.
我要绕一圈

1234
00:51:03,661 --> 00:51:05,761
So it's 2 times pi.
所以是 2 倍的 π

1235
00:51:05,830 --> 00:51:08,163
We know that Double.pi is pi.
我们知道 Double.pi 就是 π

1236
00:51:08,232 --> 00:51:10,766
And then clockwise is whether I'm gonna draw the arc around
然后 clockwise 是我是否要让弧线

1237
00:51:10,835 --> 00:51:12,301
clockwise or the other way.
顺时针还是逆时针

1238
00:51:12,370 --> 00:51:14,336
It doesn't matter because I'm going all the way around to
那不重要，因为我将要绕一圈

1239
00:51:14,405 --> 00:51:16,171
get back to the start anyway.
来回到初始的位置

1240
00:51:16,240 --> 00:51:17,706
So I'll just say false.
我会说 false

1241
00:51:17,775 --> 00:51:19,841
There you go, counter-clockwise.
也就是逆时针

1242
00:51:19,910 --> 00:51:22,110
Now, I got a warning here, an error.
现在，我这里有一个错误

1243
00:51:22,179 --> 00:51:22,845
Let's look at that error.
让我们看看这个错误

1244
00:51:22,913 --> 00:51:26,147
What does it say, it says the binary operator* (and is
他说，二元运算符 *

1245
00:51:26,216 --> 00:51:29,485
pointing to this little multiplier right here) cannot
指的是这个乘号

1246
00:51:29,553 --> 00:51:32,121
be applied to 'Int' and 'Double'.
不能让 Int 和 Double 相乘

1247
00:51:32,189 --> 00:51:33,489
Why is it saying that?
为什么这么说呢

1248
00:51:34,959 --> 00:51:36,759
These arguments to UIBezierPath,
这个 UIBezierPath 的参数

1249
00:51:36,827 --> 00:51:39,428
the floating point arguments like a startAngle and
这些浮点参数，像是开始角度

1250
00:51:39,497 --> 00:51:42,531
endAngle, what type do you think it's supposed to be?
和结束角度，你认为应该是什么类型？

1251
00:51:45,836 --> 00:51:47,803
No one?
没人吗？

1252
00:51:47,872 --> 00:51:50,472
I hear it being whispered, yes, CGFloat.
我听见有人小声说，是的，CGFloat

1253
00:51:50,541 --> 00:51:52,541
All drawing has to be CGFloat.
所有的绘制应该是 CGFloat

1254
00:51:52,610 --> 00:51:56,011
So is Double.pi, is that a CGFloat?
Double.pi 是 CGFloat 类型吗

1255
00:51:56,080 --> 00:51:57,045
No, it's a double.
当然不是，它是 Double 类型

1256
00:51:57,114 --> 00:51:59,214
Is two a CGFloat?
2 是一个 CGFloat 吗

1257
00:51:59,283 --> 00:52:00,382
Well it might be.
有可能是

1258
00:52:00,450 --> 00:52:02,784
But Swift would have to infer that it's a CGFloat.
但是 Swift 会推断那是一个 CGFloat

1259
00:52:02,853 --> 00:52:05,187
And right now Swift is confused about what that's
现在 Swift 困惑了，不知道是不是

1260
00:52:05,256 --> 00:52:07,122
supposed to be because it knows this argument is
因为它知道的

1261
00:52:07,191 --> 00:52:08,724
supposed to be a CGFloat, but
参数是一个 CGFloat

1262
00:52:08,793 --> 00:52:10,425
the thing you're multiplying it by is a Double.
但是你这里乘的却是一个 Double 类型

1263
00:52:10,494 --> 00:52:12,628
So Swift doesn't know what to infer here.
所以 Swift 不知道该怎么做了

1264
00:52:12,697 --> 00:52:15,264
Doesn't know whether to refer that to as a Double or
不知道应该推断为 Double 类型还是

1265
00:52:15,332 --> 00:52:16,265
a CGFloat.
CGFloat 类型

1266
00:52:16,333 --> 00:52:20,302
So the fix here, luckily, CGFloat has a pi.
如何修复呢？幸运的是，CGFloat 也有 pi 属性

1267
00:52:22,105 --> 00:52:23,439
Just like Double does.
就像 Double 那样

1268
00:52:23,507 --> 00:52:26,308
Now, everybody's happy, because Swift knows how to
所有人都开心了，因为 Swift 知道

1269
00:52:26,377 --> 00:52:29,745
interpret this literal as a CGFloat.
把 2 推断成一个 CGFloat 类型

1270
00:52:29,813 --> 00:52:32,247
And this argument to the endAngle is now a CGFloat.
这个结束角度的参数现在是 CGFloat 类型了

1271
00:52:32,316 --> 00:52:33,114
So now everybody's happy.
所有人都开心了

1272
00:52:33,183 --> 00:52:36,151
It's only complained that we don't use path yet.
现在唯一需要抱怨的就是我们还没有用路径

1273
00:52:36,220 --> 00:52:37,519
Okay?

1274
00:52:37,587 --> 00:52:39,554
Excellent, so now we got this arc going all around.
太棒了，我们现在有一个圆弧了

1275
00:52:39,623 --> 00:52:42,558
Let's set something about the path like it's line width for
我们为这个路径设置一些像线宽度的东西，举个例子

1276
00:52:42,626 --> 00:52:45,193
example, we'll set a nice, fairly thick line,
我将设置一个漂亮的，有点粗的线

1277
00:52:45,262 --> 00:52:48,330
five points wide, that's what that means,
五个点那么宽，这就是它的意思

1278
00:52:48,398 --> 00:52:50,432
five point zero, five points wide.
五个点那么宽

1279
00:52:50,501 --> 00:52:52,334
And then let's set the color.
我们再设一下颜色

1280
00:52:52,403 --> 00:52:56,171
So I'm gonna get UIColor, let's say, blue color and
我将用到 UIColor，比如说，蓝色

1281
00:52:56,240 --> 00:53:00,743
we'll say set, and by the way there's setFill and setStroke.
然后 set。顺便说下，这有 setFill，setStroke

1282
00:53:00,811 --> 00:53:02,110
There's also just set.
和 set

1283
00:53:02,179 --> 00:53:04,346
Set sets both the fill and the stroke.
set 包含了另外两个，同时设置填充和描边

1284
00:53:04,415 --> 00:53:06,482
Here we only need to set the stroke color, but
这里我们需要设置的只有描边颜色

1285
00:53:06,550 --> 00:53:09,351
I'll just say set so that you learn about that one.
但我用 set 是为了让你们学习一下

1286
00:53:09,420 --> 00:53:13,521
And now I can just say path stroke okay and
然后用 path.stroke()

1287
00:53:13,590 --> 00:53:15,924
it's going to stroke that path.
就开始描边了

1288
00:53:15,992 --> 00:53:17,025
So let's see what this looks like.
让我们看看是什么样的

1289
00:53:17,094 --> 00:53:19,495
Let's go do iPhone 7 here.
换成 iPhone 7

1290
00:53:21,899 --> 00:53:24,600
So hopefully this is gonna draw our skull.
但愿会绘制我们的头

1291
00:53:35,979 --> 00:53:37,145
There we go, a skull.
好啦，一个头

1292
00:53:37,214 --> 00:53:38,647
Whoo, first time, excellent.
噢，第一次，超赞

1293
00:53:38,715 --> 00:53:42,083
Okay, now I don't like the look of that very
我非常不喜欢它的样子

1294
00:53:42,152 --> 00:53:44,419
much because it goes all the way to the edges and
因为它用一条粗线

1295
00:53:44,488 --> 00:53:46,555
with a thick line that's actually cut off a little bit.
抵到所有的边框了，线宽还被切掉了一点

1296
00:53:46,623 --> 00:53:49,057
So I want to move that in a little bit so we'll do that.
我要把它往里移动一点，我们就这么做

1297
00:53:49,126 --> 00:53:51,794
Let's rotate and go from portrait to landscape.
我们旋转一下，从纵向到横向

1298
00:53:54,731 --> 00:53:57,032
Not good, not good.
不好，不好

1299
00:53:57,101 --> 00:53:58,734
Okay, why is that happening?
为什么这样了

1300
00:53:58,802 --> 00:53:59,234
That it's doing that.
为什么你要这样对我

1301
00:53:59,303 --> 00:54:00,401
Well, that's that content
这是 contentMode，我们讨论

1302
00:54:00,470 --> 00:54:01,904
mode thing I was talking about, right?
的内容模式，对吧？

1303
00:54:01,972 --> 00:54:05,307
It's not calling my draw when it goes to this other
当他变换到其他边界的时候

1304
00:54:07,744 --> 00:54:11,113
bound size right there, so it's just scaling the bits.
他不会调用我的 draw 方法，只是拉伸它

1305
00:54:11,181 --> 00:54:12,547
So let's fix both of those things,
让我们把这两个都修复一下

1306
00:54:12,616 --> 00:54:15,784
let's make it go in a little bit, and let's fix those bits.
我们让它往里一点，然后修复拉伸的问题

1307
00:54:15,853 --> 00:54:18,887
To fix the bits, we're just gonna go back to our
为了修复这些，我们只需回到我们的

1308
00:54:18,956 --> 00:54:22,024
storyboard, and click on our view right here.
storyboard，然后点击我们 view 这里

1309
00:54:22,092 --> 00:54:23,459
Lets get rid of this.
先不管这个

1310
00:54:23,527 --> 00:54:28,029
Okay, click on our View, and go over to Utilities.
好了，点击我们的视图，转到 Utilities（实用工具）

1311
00:54:28,098 --> 00:54:30,866
Inspect this with the Attributes Inspector and look,
使用属性检查器检查并查看

1312
00:54:30,934 --> 00:54:34,603
the very first one, Content Mode, Scales to Fill.
第一个，内容模式是 Scales to Fill（自适应填充）

1313
00:54:34,671 --> 00:54:37,605
Every time the bounds change it's scales to bits to fill
每次边界改变，它就会拉伸并且去填充

1314
00:54:37,674 --> 00:54:40,375
and we want Redraw.
我们想要重新绘制

1315
00:54:40,444 --> 00:54:42,777
We could also probably use Center, but
我们也可以用居中

1316
00:54:42,846 --> 00:54:45,280
I actually want Redraw because if my bounds got smaller for
但是，我们事实上我们边界变小了

1317
00:54:45,349 --> 00:54:47,148
example, I'd wanna draw my face smaller.
所以我想把脸画的小一点

1318
00:54:47,217 --> 00:54:49,951
I wouldn't want to get cut off.
我又不想它被切掉一部分

1319
00:54:50,020 --> 00:54:51,052
Okay, so there's Redraw.
好了，我们可以用重绘

1320
00:54:51,121 --> 00:54:53,588
That fixed that one, that was easy to fix.
那个修复了拉伸，这很很容易修复

1321
00:54:53,657 --> 00:54:56,725
What about making this thing kinda smaller?
怎么能把它弄得再小点呢？

1322
00:54:56,793 --> 00:55:02,631
To do that, I'm actually gonna create a var called scale.
想这么做，我们可以创建一个叫做 scale 的变量

1323
00:55:02,699 --> 00:55:06,268
And it's a drawing thing so it's a CGFloat.
这是和绘制相关的，所以它是一个 CGFloat

1324
00:55:06,336 --> 00:55:09,871
And I'm going to set it to let's say 0.9 and
我现在把它设为 0.9

1325
00:55:09,940 --> 00:55:11,406
that's going to mean 90%.
那就是 90% 的意思

1326
00:55:11,475 --> 00:55:13,574
All I'm going to do is take my radius and
我将要把我的半径

1327
00:55:13,643 --> 00:55:15,777
multiply it by that scale.
乘以 scale

1328
00:55:15,846 --> 00:55:17,780
So by multiplying my radius by 0.9 or
把半径乘以 0.9 或者

1329
00:55:17,848 --> 00:55:21,450
90% it should zoom move it in a little bit right.
90%, 它应该会缩小一点

1330
00:55:21,518 --> 00:55:23,585
Kind of in from the edges by 90%.
对于边界来说稍微缩进来了些

1331
00:55:23,653 --> 00:55:29,358
So let's see if both those things got fixed.
让我们再来看看修复的怎么样

1332
00:55:33,864 --> 00:55:34,929
So the 90% worked.
90% 好使了

1333
00:55:34,998 --> 00:55:40,235
Clearly, it's in 90% and the rotation works also.
很明显，它是 90%，并且旋转后也是

1334
00:55:40,303 --> 00:55:42,204
So we're off to a good start here,
现在我们有一个好的开端

1335
00:55:42,273 --> 00:55:43,405
things seem to be working just fine.
看起来都按照预期一样好使了

1336
00:55:43,474 --> 00:55:45,974
Alright, so, what's the next thing we wanna do?
那我们接下来要做什么呢？

1337
00:55:46,043 --> 00:55:47,943
Well, we wanna draw eyes and
我们要开始画眼睛

1338
00:55:48,012 --> 00:55:50,579
a mouth and things like that, I wanna start thinking
和嘴这些东西，让我先思考一下

1339
00:55:50,647 --> 00:55:52,814
a little bit about my internal architecture.
我内部的结构

1340
00:55:52,883 --> 00:55:55,817
And I'm kinda liking the idea of having some private funcs,
我倾向于有一些内部私有方法

1341
00:55:55,886 --> 00:55:58,454
like give me the path for the skull.
比如 pathForSkull 给我头的轮廓

1342
00:56:00,257 --> 00:56:04,526
And have that return a UIBezierPath that
然后返回一个可以

1343
00:56:04,595 --> 00:56:06,562
I can then stroke.
进行描边的 UIBezierPath 实例

1344
00:56:06,630 --> 00:56:08,130
And then I'll have the same thing, give me the path for
我将要对眼睛做同样的事情，给我眼睛的路径

1345
00:56:08,199 --> 00:56:09,464
the eye, give me a path for
给我嘴的路径

1346
00:56:09,533 --> 00:56:10,398
the mouth, you see what I mean?
你们明白我的意思了吧？

1347
00:56:10,467 --> 00:56:11,466
I'll get all these.
我会得到全部这些

1348
00:56:11,535 --> 00:56:14,436
And so I can just take this code down here
所以我可以拿下边这些

1349
00:56:14,505 --> 00:56:16,505
that creates this path for the skull and
创建头轮廓路径的代码

1350
00:56:16,573 --> 00:56:19,941
I'll just put it up here and I'll just return this path.
然后我把它放在这，返回这个路径

1351
00:56:20,010 --> 00:56:24,412
And then, down here, instead of saying paths.stroke,
下边这里，取代 paths.stroke

1352
00:56:24,481 --> 00:56:27,883
I'll say pathForSkull().stroke().
我会用 pathForSkull().stroke()

1353
00:56:27,951 --> 00:56:29,784
Do you see that?
你们懂了吗？

1354
00:56:29,853 --> 00:56:32,087
Now, another thing is the skullRadius and
另外的是 skullRadius

1355
00:56:32,156 --> 00:56:34,756
the skullCenter, I want all the other things like the eyes
和 skullCenter，我想要全部的其他东西都

1356
00:56:34,825 --> 00:56:38,059
and the mouth to all be relative to that.
像眼睛和嘴这些和它保持相对位置和大小

1357
00:56:38,128 --> 00:56:40,462
So if I make my skull small I need the eyes to get smaller,
如果使轮廓变小，我需要眼睛变小

1358
00:56:40,531 --> 00:56:42,730
the mouth to get smaller, everything to move in.
嘴也变小，把这些都移进来

1359
00:56:42,799 --> 00:56:44,232
So I'm gonna use these two guys,
我要把这两个东西

1360
00:56:44,301 --> 00:56:46,801
I'm gonna make them instead of being local variables in draw,
把本地变量从 draw 函数里移出来

1361
00:56:46,870 --> 00:56:51,707
I'm gonna move them out and make them be private vars.
让他们变成私有变量

1362
00:56:51,775 --> 00:56:55,410
And in specific they're gonna be private computed vars.
具体点说他们是计算型私有变量

1363
00:56:55,479 --> 00:56:58,346
So I'm just gonna take what they were before and
所以我会用它们之前的内容

1364
00:56:58,415 --> 00:57:01,516
I'm just gonna return them so that no matter what my
然后返回这个，这样的话无论

1365
00:57:01,585 --> 00:57:04,386
bounds is, at any given time, skullRadius,
对于任何 bounds，skullRadius

1366
00:57:04,455 --> 00:57:07,989
that var--which of course we have to type, so CGFloat--that
那个变量，（当然是 CGFloat 类型）

1367
00:57:08,058 --> 00:57:11,459
skullRadius is always going to match by bounds, okay?
那个 skullRadius 都会和 bounds 配对，懂不？

1368
00:57:11,528 --> 00:57:12,794
Because every time I ask for it,
因为每一次我请求它时

1369
00:57:12,862 --> 00:57:15,396
I'm gonna recompute it using this little function.
我都会用这个函数计算一次

1370
00:57:15,465 --> 00:57:16,631
And same thing with skullCenter,
然后 skullCenter 也是一样

1371
00:57:16,700 --> 00:57:19,133
I'm gonna say private var skullCenter,
设置一个 private var skullCenter

1372
00:57:19,202 --> 00:57:23,037
which is also a CGFloat, no this one is a CG point, and
同样也是一个 CGFloat，不对这是一个 CGPoint

1373
00:57:23,106 --> 00:57:24,807
it's going to be computed.
然后也是计算型变量

1374
00:57:27,511 --> 00:57:29,010
Now, one thing you noticed here,
现在，注意这一点

1375
00:57:29,079 --> 00:57:31,746
I don't remember if I covered this in the other lecture but
我忘记我是否在别的课上涉及到过

1376
00:57:31,815 --> 00:57:34,549
you notice, I'm not saying get here.
但是你们要注意，我这里没有写 get

1377
00:57:34,618 --> 00:57:36,818
See, I'm not putting get and set.
看到吗，我没有写 get 和 set

1378
00:57:36,887 --> 00:57:39,554
Well, I'm not putting set because you can't set
我没放 set 是因为你不能设置

1379
00:57:39,623 --> 00:57:40,955
the skull center.
这个 skullCenter

1380
00:57:41,024 --> 00:57:43,458
Skull center is always the center of my bounds so
skullCenter 会一直是我 bounds 的中心

1381
00:57:43,526 --> 00:57:44,559
I can't set it.
所以我不能设置它

1382
00:57:44,628 --> 00:57:46,662
And then if you have only a get,
然后如果你只有一个 get 的话

1383
00:57:46,730 --> 00:57:48,363
turns out you don't need the get.
你会发现其实你不需要 get

1384
00:57:48,432 --> 00:57:50,198
Because it's kinda redundant.
因为那会有些冗余

1385
00:57:50,267 --> 00:57:54,202
So you get this kinda nicer looking code here.
那么你得到了这个看起来更好的代码

1386
00:57:54,271 --> 00:57:55,604
So now we have skullRadius and
现在我们有了 skullRadius 和

1387
00:57:55,672 --> 00:57:58,006
skullCenter available to all of our methods.
skullCenter 这两个对所有方法都能用到的变量

1388
00:57:58,074 --> 00:58:00,675
And so all our other paths, like path for eye and
那么所有其他的路径，像是眼睛路径和

1389
00:58:00,744 --> 00:58:02,443
all that stuff can use them.
其他的东西都可以用到它们

1390
00:58:02,512 --> 00:58:03,311
So let's get started on those.
那我们开始吧

1391
00:58:03,380 --> 00:58:05,714
Let's do path for eye, how about that.
我们来做眼睛路径

1392
00:58:05,782 --> 00:58:07,916
So in a private func, pathForEye.
写一个私有方法，pathForEye

1393
00:58:07,984 --> 00:58:10,852
Now actually, probably the path for the eye
现在事实上，这个用于左眼和右眼的眼睛路径

1394
00:58:10,921 --> 00:58:13,287
is almost the same for the left eye and the right eye.
基本上是一样的

1395
00:58:13,356 --> 00:58:17,125
So I'm gonna create a little type here called Eye which
那么我这里会创建一个小类型叫做 Eye

1396
00:58:18,128 --> 00:58:19,428
is just gonna be a little enum.
也就是一个小枚举

1397
00:58:21,665 --> 00:58:26,601
And it's gonna just be the left and right eye, so
里面就只有左眼和右眼

1398
00:58:26,670 --> 00:58:28,537
private enum Eye.
私有枚举 Eye

1399
00:58:28,605 --> 00:58:35,844
Let's see Eye is case left case right, okay.
有 case left 和 case right

1400
00:58:35,912 --> 00:58:38,713
So I mean it's perfectly fine to use an enum
所以用枚举是没有问题的

1401
00:58:38,782 --> 00:58:40,549
just to represent something simple like this.
特别是用来表示这种简单的内容

1402
00:58:40,617 --> 00:58:43,451
You don't have to always be doing methods and
并不总是需要函数

1403
00:58:43,520 --> 00:58:44,419
associated values.
和关联值

1404
00:58:44,488 --> 00:58:45,820
We don't have any associated values here.
我们这里不需要关联值

1405
00:58:45,889 --> 00:58:49,057
We're just representing it as a way to specify in this API,
我们只是用一种方法来让 API 更明确地

1406
00:58:49,125 --> 00:58:54,228
which eye we want the path, the UIBezierPath, for.
说明哪只眼睛需要 UIBezierpath

1407
00:58:54,297 --> 00:58:57,766
So, by the way, also I wanna have some constants
所以顺便我还需要一些常量

1408
00:58:57,834 --> 00:59:01,069
that tell me where the eye is relative to the center and
告诉我两个眼睛到中心的相对距离

1409
00:59:01,137 --> 00:59:04,038
where the mouth is and how big the eyes are.
嘴巴的位置在哪里，眼睛有多大

1410
00:59:04,107 --> 00:59:07,075
So to save a little bit of time here, I'm going to just
为了节约点时间

1411
00:59:07,143 --> 00:59:11,913
type those in at the bottom here real quick.
我在这下面快速地输进去

1412
00:59:11,982 --> 00:59:13,581
Look how fast I typed them in.
看我打得多快

1413
00:59:13,650 --> 00:59:14,716
This is, by the way, how we do
顺带说一下

1414
00:59:16,253 --> 00:59:20,188
constants in swift we just create a struct and we make
我们在 Swift 里常量都是用个结构体

1415
00:59:20,257 --> 00:59:25,193
static lets on it which are all of our constants and
然后用 static let 定义所有的常量

1416
00:59:25,262 --> 00:59:28,463
what's really cool about this, one it groups them together.
这样做的好处是，你把这些集中在一起

1417
00:59:28,532 --> 00:59:29,697
Like here I have Ratios,
比如我这里的 Ratios

1418
00:59:29,766 --> 00:59:33,634
it's all the ratios between the skull radius and all these
这是脸半径和所有其他部分的比例

1419
00:59:33,703 --> 00:59:36,271
things I want to do like the eye offset and the mouth.
比如到眼睛和嘴巴的间距

1420
00:59:37,240 --> 00:59:38,473
Also it types them.
同时还声明了类型

1421
00:59:38,541 --> 00:59:40,608
You see these are typed constants.
你看这些都是指定类型的常量

1422
00:59:40,677 --> 00:59:42,811
I can put the type in there, because they're just vars,
我可以声明类型，因为这些就是变量

1423
00:59:42,880 --> 00:59:45,580
they're static vars on this struct.
就是结构体的静态变量

1424
00:59:45,649 --> 00:59:46,948
Okay. We don't have any storage
虽然我们没有任何属性

1425
00:59:47,016 --> 00:59:47,481
in this struct.
在这个结构体里

1426
00:59:47,550 --> 00:59:48,483
Doesn't have any methods.
也没有任何方法

1427
00:59:48,552 --> 00:59:50,318
It just is only used for constants here.
这个只是用来存储变量的

1428
00:59:50,387 --> 00:59:54,523
Now, I'm gonna use these constants down here, and
现在我就用这下面的这些常量

1429
00:59:54,591 --> 00:59:56,191
I'm gonna use the skull radius and
结合上面的 skullRadius

1430
00:59:56,259 --> 00:59:59,360
center up here to calculate the path for the eye.
和 skullCenter 来计算 pathForEye

1431
00:59:59,429 --> 01:00:00,295
So how am I gonna do that?
那我要怎么做呢？

1432
01:00:00,363 --> 01:00:03,331
First I need the center of the eye.
首先我需要计算眼睛的中心

1433
01:00:03,400 --> 01:00:05,901
Now, I'm gonna create a function to calculate
现在，我需要一个函数来计算

1434
01:00:05,969 --> 01:00:06,902
the center of the eye.
眼睛的中心

1435
01:00:06,970 --> 01:00:09,337
But I only need it for pathForEye.
但是我只需要在 pathForEye 里面使用

1436
01:00:09,406 --> 01:00:13,108
So I'm actually gonna put it inside pathForEye.
所以我就把它放在 pathForEye 里

1437
01:00:13,176 --> 01:00:16,277
So I'm gonna create a function here, centerOfEye.
我在这里写一个函数，centerOfEye

1438
01:00:16,346 --> 01:00:18,746
Just gonna type it in quick here to save some time.
节约时间，还是快速地输进去

1439
01:00:18,815 --> 01:00:20,015
I'll go through it though.
但我还是要讲讲

1440
01:00:20,083 --> 01:00:23,051
And centerOfEye, look how it's inside pathForEye.
看我是怎么把 centerOfEye 放到 pathForEye 里的

1441
01:00:23,120 --> 01:00:25,954
And that's perfectly legal, some of you are probably using
这完全是符合语法的，你们其中的一些

1442
01:00:26,023 --> 01:00:27,855
that strategy in your assignment two.
已经在作业二中采用了这个技巧了

1443
01:00:27,924 --> 01:00:30,225
I think I mentioned it in a hint, that you can do it.
我认为我之前提示过，你可以这么做

1444
01:00:30,294 --> 01:00:33,160
And all it does is, it keeps centerOfEye inside here,
这样我们就可以把 centerOfEye 留在这里面

1445
01:00:33,229 --> 01:00:34,729
because it's not needed anywhere else.
因为并不需要在其他的地方使用

1446
01:00:34,797 --> 01:00:36,564
So now, readers of my code don't have to worry about this
这样读代码的人就不需要担心

1447
01:00:36,633 --> 01:00:37,899
thing being called somewhere else, and
这个函数会被其他地方调用

1448
01:00:37,968 --> 01:00:39,267
what it's semantics might be out there.
也不用多想它是做什么的

1449
01:00:39,336 --> 01:00:41,702
They already know that it's only used in this nice,
他们可以知道这个函数只会在这个

1450
01:00:41,771 --> 01:00:44,239
little space right here, so it's kind of a nice way to
很小的部分用到，所以这是一个很好的方法

1451
01:00:44,308 --> 01:00:46,842
arrange your code to make it a little more readable.
组织你的代码，增加代码的可读性

1452
01:00:48,245 --> 01:00:49,510
So how does centerOfEye work?
那 centerOfEye 是怎么实现的？

1453
01:00:49,579 --> 01:00:51,279
Well it takes the eye, and
它接受一个 Eye 作为参数

1454
01:00:51,348 --> 01:00:54,782
it just gets the eye offset by taking the skull radius and
计算眼睛到中心间距的方法，从把脸的半径

1455
01:00:54,851 --> 01:00:56,584
dividing it by one of those constants,
除以 Ratios.skullRadiusToEyeOffset

1456
01:00:56,653 --> 01:00:59,287
the ratio between the skull radius to the eye offset,
脸半径和眼睛到中心间距的常量比例

1457
01:00:59,356 --> 01:01:01,322
that's how much it's gonna offset the eye.
这样就能算出眼睛到中心的间距

1458
01:01:01,391 --> 01:01:03,991
Now I'm gonna offset the eye the same amount up as I do
我想让眼睛到中心的横纵间距

1459
01:01:04,060 --> 01:01:04,726
to the sides.
都是这个

1460
01:01:05,963 --> 01:01:09,230
So the line between the nose of our face, and
如果我们用线把鼻子

1461
01:01:09,299 --> 01:01:11,332
the two eyes is gonna be equilateral triangles, or no,
和两个眼睛连起来，会是一个等边三角形

1462
01:01:11,401 --> 01:01:13,134
not quite equilaterals.
不完全等边

1463
01:01:13,203 --> 01:01:13,935
It can be a little wider, but
稍微有点宽（等腰直角）

1464
01:01:14,004 --> 01:01:19,040
the same distance going up as it is going out to the sides.
总之向上和向旁边的位移是一样的

1465
01:01:19,109 --> 01:01:20,709
I'm gonna start with the eyeCenter being in the center.
接着我以 eyeCenter 作为中心

1466
01:01:20,710 --> 01:01:22,310
And then,
然后

1467
01:01:22,378 --> 01:01:24,145
I'm starting with the eye in the center of the face, and
先把中心放在脸的中心

1468
01:01:24,214 --> 01:01:26,080
then I'm gonna move it up and over.
然后向上和旁边移

1469
01:01:26,149 --> 01:01:27,515
Okay. So here I'm moving it up.
所以我先向上移动

1470
01:01:27,584 --> 01:01:30,352
Notice that up is minus the eye offset,
要注意向上移是减法

1471
01:01:30,420 --> 01:01:34,222
because decreasing y is up, increasing y is down.
因为减少 y 是向上，增加 y 是向下

1472
01:01:34,291 --> 01:01:38,793
And for x, I'm going to add the eye offset or
对于 x，我会加上 eyeOffset

1473
01:01:38,862 --> 01:01:41,129
subtract the eye offset,
或者是减去 eyeOffset

1474
01:01:41,197 --> 01:01:43,164
depending on whether it's the left eye or the right eye.
取决于是左眼还是右眼

1475
01:01:43,233 --> 01:01:46,234
So for the left eye, I'm going to subtract the eye offset.
所以对于左眼，是减去间距

1476
01:01:46,303 --> 01:01:48,437
And for the right eye, I'm going to add the eye offset.
右眼是加上间距

1477
01:01:49,506 --> 01:01:50,371
Okay?
对吧？

1478
01:01:50,440 --> 01:01:51,773
Everyone understand that little
大家应该都理解这个

1479
01:01:51,842 --> 01:01:52,974
construct right there, I hope.
构造方法了吧，至少我希望是这样

1480
01:01:54,144 --> 01:01:55,343
Okay and then it's returning the center.
最后返回这个中心的位置

1481
01:01:55,412 --> 01:01:57,044
So now I have the center of the eye.
现在我得到眼睛的中心了

1482
01:01:57,113 --> 01:01:58,880
So using the center of the eye,
接着用眼睛的中心

1483
01:01:58,948 --> 01:02:02,084
I can say let the eye radius equal the skull radius
然后计算眼睛半径，用脸的半径

1484
01:02:05,321 --> 01:02:10,024
divided by the ratio for that one,
除以和眼睛半径的比例

1485
01:02:10,093 --> 01:02:16,364
which is skullRadiusToEyeRadius.
也就是 Ratios.skullRadiusToEyeRadius

1486
01:02:16,432 --> 01:02:18,766
Okay, so that's what I'm gonna do.
这是计算的方法

1487
01:02:18,835 --> 01:02:21,469
And I'm gonna let the eyeCenter just
然后 let eyeCenter = centerOfEye(eye)

1488
01:02:21,538 --> 01:02:23,137
equal centerOfEye, whichever eye.
把 eye 传给函数计算出中心坐标

1489
01:02:23,206 --> 01:02:25,306
The eye that's up here.
就是把上面的参数 eye

1490
01:02:25,375 --> 01:02:28,510
So I'm just calling this little function right here.
传给 centerOfEye 这个函数

1491
01:02:30,981 --> 01:02:33,681
And so I have those two things.
现在我有了这两个东西

1492
01:02:33,750 --> 01:02:35,583
So I can just create another circle.
我就能创建另一个圆了

1493
01:02:35,652 --> 01:02:39,087
So I'm going to let path equal UIBezierPath and
我让 path 等于 UIBezierPath

1494
01:02:39,156 --> 01:02:40,555
do that arc again.
还是用 arc 那个构造器

1495
01:02:40,623 --> 01:02:42,190
Here the center is the eye center.
中心是 eyeCenter

1496
01:02:42,258 --> 01:02:44,492
And the radius is the eye radius.
半径是 eyeRadius

1497
01:02:44,560 --> 01:02:46,461
And the start angle is still zero.
开始角度还是零

1498
01:02:46,529 --> 01:02:49,530
Then end angle is still CGFloat.pi* 2, and clockwise,
终止角度还是 CGFloat.pi * 2，是否顺时针

1499
01:02:49,599 --> 01:02:50,264
it doesn't matter.
无所谓

1500
01:02:50,333 --> 01:02:52,400
I'll go the other way this time.
这次我就换个方向吧

1501
01:02:52,469 --> 01:02:54,769
Okay, so there's my path.
这就是我的路径了

1502
01:02:54,838 --> 01:02:58,439
Let's set path.lineWidth equal 5.0 again.
同样把线宽 lineWidth 设为 5.0

1503
01:02:58,508 --> 01:03:00,341
Starting to get tired of typing that.
重复这些都开始觉得有些烦了

1504
01:03:00,410 --> 01:03:01,876
It's probably not a good thing.
看来这不是个很好的设计

1505
01:03:01,945 --> 01:03:03,145
And then let's return the path.
最后返回这个路径

1506
01:03:04,848 --> 01:03:06,013
Okay. So that's it.
好，就是这样了

1507
01:03:06,082 --> 01:03:07,949
So that gets the path for either the left eye or
这个方法返回左眼或右眼

1508
01:03:08,018 --> 01:03:11,052
the right eye.
的路径

1509
01:03:11,120 --> 01:03:14,356
we'll say pathForEye, the left eye, stroke.
在 draw 里调用 pathForEye(.left).stroke()

1510
01:03:15,959 --> 01:03:19,561
Okay, pathForEye, the right eye, stroke.
同理，描右眼的路径

1511
01:03:21,131 --> 01:03:22,964
Okay, I hope everyone's comfortable with the fact that
我希望大家能适应

1512
01:03:23,033 --> 01:03:24,866
I'm calling a method, taking this return value, and
我调用了一个方法，拿着返回值

1513
01:03:24,934 --> 01:03:26,201
immediately sending it a message.
立刻给它发消息

1514
01:03:29,339 --> 01:03:30,271
So, let's see how this went.
让我们看看效果如何

1515
01:03:30,340 --> 01:03:31,239
Let's see if we got this right.
看看是否做对了

1516
01:03:39,282 --> 01:03:40,348
Look at that.
看啊

1517
01:03:40,417 --> 01:03:41,415
First time.
一次成功

1518
01:03:41,484 --> 01:03:42,884
It's really going well today.
今天还挺顺利的

1519
01:03:42,953 --> 01:03:45,186
Okay, so there's our two eyes, they look good.
所以这就是我们的两个眼睛，看起来不错

1520
01:03:45,255 --> 01:03:46,621
You know what would be kind of cool though?
你们觉得怎样能更酷一点呢？

1521
01:03:46,690 --> 01:03:48,957
If we could have open eyes and closed eyes.
比如我们能让它睁开和闭上眼睛？

1522
01:03:50,460 --> 01:03:52,760
So how could we, how could we have open eyes and closed eyes?
那我们如何实现睁眼和闭眼呢？

1523
01:03:52,829 --> 01:03:54,229
How about this: let's go up here
这样如何：我们到上面

1524
01:03:54,230 --> 01:03:55,630
and just like we had this
就像我们之前做的

1525
01:03:55,698 --> 01:03:58,633
var scale which by the way notice I left the var public.
scale 这个变量。注意我这里把 scale 保留为公开

1526
01:03:58,701 --> 01:04:00,568
Scale, so that people who are using my face view,
所以使用 FaceView 的人

1527
01:04:00,637 --> 01:04:02,236
they can control the size of the face.
他们可以控制脸的大小

1528
01:04:02,305 --> 01:04:03,505
I don't mind.
这我不介意

1529
01:04:03,573 --> 01:04:06,107
And, I'm also gonna have eyes open, which is going to be
这里我添加一个 eyesOpen

1530
01:04:06,176 --> 01:04:08,409
a bool, which will start out being false.
是一个布偶型变量，初始值为 false

1531
01:04:08,478 --> 01:04:10,344
And we're just gonna make our pathForEye,
然后我们让 pathForEye

1532
01:04:10,413 --> 01:04:13,314
look at this var, look at the value of this var.
根据这个变量的值

1533
01:04:13,383 --> 01:04:15,583
And either have the eyes open or closed.
生成开着或闭着的眼睛

1534
01:04:15,651 --> 01:04:18,052
So, I'm back here in path for eye.
我们回到 pathForEye

1535
01:04:18,121 --> 01:04:21,322
So, if the eyes are open then we're just gonna do what we
如果睁着眼睛，就还是按照

1536
01:04:21,391 --> 01:04:23,925
were already doing here, this business.
我们已经有的这部分做

1537
01:04:23,994 --> 01:04:26,027
Okay, because that's what we did so far.
因为我们之前就是这样的

1538
01:04:26,096 --> 01:04:27,962
But if the eyes are closed,
但如果眼睛是闭着的

1539
01:04:28,031 --> 01:04:29,497
then I want the path to be different.
那我们就换另一种路径

1540
01:04:29,566 --> 01:04:31,099
So, watch what I'm gonna do here.
看我在这里是怎么做的

1541
01:04:31,168 --> 01:04:37,172
Let path be a UIBezierPath without a value to start.
只声明 path 为 UIBezierpath，不赋值

1542
01:04:39,075 --> 01:04:42,744
Okay, and then I set it here, and I'm gonna set it here, and
然后再在两个分支里分别初始化

1543
01:04:42,812 --> 01:04:44,212
that's allowed.
这是允许的

1544
01:04:44,281 --> 01:04:46,147
In other words Swift is smart enough to know,
换句话说，Swift 很聪明

1545
01:04:46,216 --> 01:04:49,417
you created a let, which can only be initialized once.
知道 let 声明的常量只能初始化一次

1546
01:04:49,486 --> 01:04:52,019
But you conditionally initialized it here,
但是你可以根据不同的情况初始化

1547
01:04:52,088 --> 01:04:54,356
because now I'm gonna say path equals.
在 else 里我让 path 等于

1548
01:04:54,424 --> 01:04:56,257
And for the closed case I'm just gonna make
闭眼的情况

1549
01:04:56,326 --> 01:04:58,793
a bezier path that starts out blank.
先初始化一个空的路径

1550
01:04:58,862 --> 01:05:00,662
And then I'm gonna just move to, line to,
移动到起点，然后画一条线

1551
01:05:00,730 --> 01:05:04,032
to make a little horizontal line for a closed eye.
用一条短横线表示闭着的眼睛

1552
01:05:04,100 --> 01:05:07,435
So, I'm gonna say path.move(to: ) to move to
所以我先用 path.move(to:)

1553
01:05:07,504 --> 01:05:12,974
a point, CGPoint, we use this constructor right here.
移动到一个 CGPoint 点，用这个构造器

1554
01:05:13,043 --> 01:05:18,512
Not that one, let's use, this one, CGFloat.
啊，不是这个，应该是 CGFloat 这个

1555
01:05:18,581 --> 01:05:20,548
And the point we're gonna move to we're gonna move to
我们要移动到的点

1556
01:05:20,617 --> 01:05:24,652
the eyeCenter x minus the eyeRadius.
是眼睛中心横坐标减去半径

1557
01:05:24,720 --> 01:05:26,087
So, we're gonna move to the center of the eye and
移动到眼睛中心

1558
01:05:26,156 --> 01:05:29,023
back up with the eye there.
然后到左边的起点

1559
01:05:29,092 --> 01:05:31,092
And we're gonna be at the eyeCenter.y.
纵坐标和眼睛中心一致

1560
01:05:31,161 --> 01:05:32,994
So, we're gonna right in the eyeCenter and
我们穿过眼睛的中心

1561
01:05:33,063 --> 01:05:34,229
we're gonna draw a horizontal line so
画一条横线

1562
01:05:34,298 --> 01:05:36,664
we're gonna move to the left side of it.
我们移动到左边之后

1563
01:05:36,733 --> 01:05:41,303
And then we're going to add a line to the right side.
接着要画一条线到右边

1564
01:05:41,371 --> 01:05:47,008
So, another CGPoint which is this one again.
另一个 CGFloat 也用同一个构造器

1565
01:05:47,076 --> 01:05:49,543
And this one is going to be the eyeCenter.x
这个点横坐标是在眼睛中心

1566
01:05:49,612 --> 01:05:51,779
plus the eyeRadius.
加上眼睛的半径

1567
01:05:51,848 --> 01:05:56,184
And it's still at the eyeCenter, okay?
纵坐标还是和中心一样

1568
01:05:56,253 --> 01:05:57,685
Make sense?
是吧？

1569
01:05:57,754 --> 01:05:59,087
Two more parentheses in there.
（这里还缺了两个括号）

1570
01:06:00,256 --> 01:06:01,089
Everyone see what I did there?
大家都看清楚我做了什么吗？

1571
01:06:01,158 --> 01:06:03,758
But I just wanna make sure you understood this
最重要的是你们理解了这个

1572
01:06:03,827 --> 01:06:04,759
thing of let path.
let path 的用法

1573
01:06:04,827 --> 01:06:08,129
You don't have to say equals here as long as this if then
你可以不用声明的同时赋初值

1574
01:06:08,198 --> 01:06:12,867
still only initializes it once and doesn't change it.
只要你之后有且只有初始化过一次

1575
01:06:12,936 --> 01:06:14,135
Because it's still a valid let.
这样它都是个合法的常量

1576
01:06:15,671 --> 01:06:17,305
So, let's go take a look at that.
我们来看看效果

1577
01:06:25,015 --> 01:06:26,815
Okay, eyes closed.
很好，眼睛是闭着的

1578
01:06:26,883 --> 01:06:28,148
Excellent, okay?
很好

1579
01:06:28,217 --> 01:06:29,350
They're closed eyes.
两个闭着的眼睛

1580
01:06:29,419 --> 01:06:31,386
We can go back here, set this to true.
我们到这里改为 true

1581
01:06:31,454 --> 01:06:34,522
And again, we should get open eyes.
这下我们应该得到的是睁开的眼睛

1582
01:06:35,992 --> 01:06:37,158
Questions?
有问题吗？

1583
01:06:37,227 --> 01:06:39,894
So, the question is when do people do a custom
好，问题是问什么时候人们会用

1584
01:06:39,962 --> 01:06:42,931
view like this when they draw off their own thing?
自定义视图来画这些东西？

1585
01:06:42,999 --> 01:06:45,900
In other words, when they don't use this built in things
换句话说，为什么不用内建的

1586
01:06:45,969 --> 01:06:48,502
like button and things like that. Well, it depends on
按钮那些来实现？这个要看情况

1587
01:06:48,571 --> 01:06:50,471
the content that they are providing.
主要看要画的是什么内容

1588
01:06:50,540 --> 01:06:53,107
But a lot of times, maybe they are not drawing with arcs and
如果不画圆或圆弧

1589
01:06:53,175 --> 01:06:56,277
circles, maybe they're drawing with images and text okay?
只是图片和文字就不用了

1590
01:06:56,346 --> 01:06:59,380
They're laying how they want down to a level or
仅仅是布局，只要在一定范围内

1591
01:06:59,449 --> 01:07:02,349
in an orientation that those can do. Or maybe they're doing
能够完成就不需要自己画

1592
01:07:02,418 --> 01:07:05,553
text along a curve, which you can do with this for example.
像是让文字显示到一条曲线上这种操作

1593
01:07:05,622 --> 01:07:06,721
So, it's that kind of thing.
这种复杂一点的就能且只能自己绘制了

1594
01:07:06,790 --> 01:07:08,456
You might not see raw drawing like this.
一般你是看不到这种单纯画图的

1595
01:07:08,525 --> 01:07:10,091
We're doing raw drawing because it's simple and
我们直接画线的原因是构图简单

1596
01:07:10,160 --> 01:07:13,328
I'm trying to show you how you do it.
只是给你做个示范

1597
01:07:13,396 --> 01:07:14,796
But there are apps that are drawing
不过外面也有那种画图程序

1598
01:07:14,865 --> 01:07:16,530
apps where you can take your finger and draw.
你可以用自己的手指画图

1599
01:07:16,599 --> 01:07:18,799
They would clearly do this as well right,
想这些程序是需要自己画线的

1600
01:07:18,868 --> 01:07:20,868
some of you might do that as your final project.
你们可以考虑作为期末项目来做

1601
01:07:20,937 --> 01:07:23,138
Okay, so anyway there's our eye.
总之，眼睛我们画好了

1602
01:07:23,206 --> 01:07:25,873
So, we've got our eyes going, we've got our skull.
我们画了眼睛，画了脸的轮廓

1603
01:07:25,942 --> 01:07:26,607
How about our mouth?
那嘴巴呢？

1604
01:07:26,676 --> 01:07:28,409
We've gotta get the mouth going so let's go do that.
接下来我们就画嘴

1605
01:07:28,478 --> 01:07:30,144
And we're gonna do the same thing there.
我们还是用类似的方法

1606
01:07:30,213 --> 01:07:34,882
I'm gonna have a private func pathForMouth and
我定义一个私有方法 pathForMouth

1607
01:07:34,951 --> 01:07:38,453
it's gonna be a UIBezierPath.
返回 UIBezierpath

1608
01:07:38,521 --> 01:07:40,154
So, how I'm going to do the mouth.
那怎么画嘴呢？

1609
01:07:40,223 --> 01:07:41,956
Actually, I'm going to start by drawing the mouth as
我先把嘴巴画成一个

1610
01:07:42,025 --> 01:07:42,991
a rectangle,
长方形

1611
01:07:43,059 --> 01:07:45,426
just to show you where I'm gonna put it on screen.
给你们看看我要把嘴放在什么位置

1612
01:07:45,494 --> 01:07:47,795
And then we'll turn it, we'll use a bezier curve,
然后我们再把它换成一条贝塞尔曲线

1613
01:07:47,864 --> 01:07:49,130
actually, to make the mouth.
来画这个嘴

1614
01:07:49,199 --> 01:07:51,832
So, how am I going to do that?
那怎么做呢？

1615
01:07:51,901 --> 01:07:54,468
First, I'm going to calculate
首先我需要计算一些内容

1616
01:07:54,537 --> 01:07:57,638
some things like the width of the mouth, the height of
比如嘴巴的宽度，高度

1617
01:07:57,707 --> 01:08:00,307
the mouth, and the offset of the mouth--the offset down
以及嘴巴下部到脸中心的间距

1618
01:08:00,376 --> 01:08:03,411
from the middle of the face--using more of these
使用的是我们的那些

1619
01:08:03,480 --> 01:08:05,980
ratios.
比例

1620
01:08:06,049 --> 01:08:07,214
So, I'm just calculating the mouth, width,
这三个计算的就是嘴的

1621
01:08:07,283 --> 01:08:09,350
height, and offset.
宽、高、间距

1622
01:08:09,418 --> 01:08:11,619
Now, I'm gonna use that to create the rectangle in which
接着我用这几个构成一个矩形

1623
01:08:11,688 --> 01:08:13,354
I'm going to put the mouth.
最终嘴会放在这个里面

1624
01:08:13,423 --> 01:08:18,993
Let's do that, let mouthRect equal and so the mouthRect
我让嘴巴的矩形等于，let mouthRect =

1625
01:08:19,061 --> 01:08:21,462
is gotta be offset down by the mouth offset.
这个矩形向下移了 mouthOffset 那么多

1626
01:08:21,531 --> 01:08:23,831
And it's gonna be the width and height, so let's do that.
然后宽和高都是计算出来了的

1627
01:08:23,899 --> 01:08:28,602
So, CGRect we'll use this constructor right here,
所以用 CGRect 这个

1628
01:08:28,671 --> 01:08:32,573
CGFloat, we'll do the skull's center dot x
全是 CGFloat 的构造器。X 在脸中心横坐标

1629
01:08:32,642 --> 01:08:36,511
minus the mouth's width, divided by two.
减去嘴巴宽度一半的地方

1630
01:08:36,580 --> 01:08:39,514
So that's, because we obviously want the mouth
因为我们希望嘴巴是在面部

1631
01:08:39,582 --> 01:08:42,450
centered in there, and then for y,
居中的。对于纵坐标

1632
01:08:42,518 --> 01:08:46,354
we'll use the skullCenter.y plus the mouthOffset.
是脸中心向下移动 mouthOffset

1633
01:08:47,523 --> 01:08:48,389
And again it's plus,
再次强调是加上

1634
01:08:48,458 --> 01:08:52,093
because plus is down in our drawing system.
因为在这个坐标系里加代表向下

1635
01:08:52,162 --> 01:08:57,932
And the width is just the mouthWidth and
宽度就是 mouthWidth

1636
01:08:58,001 --> 01:09:00,368
the height is the mouthHeight.
高度就是 mouthHeight

1637
01:09:00,437 --> 01:09:04,005
Let me make this a little easier to read like this.
让我这样整理一下代码

1638
01:09:12,649 --> 01:09:13,414
Everyone understand what I'm
大家都明白

1639
01:09:13,483 --> 01:09:14,948
doing there with the mouse rect?
我怎么处理 mouthRect 了吧？

1640
01:09:15,017 --> 01:09:16,383
Let's just draw this rect.
我们就先把这个矩形画出来

1641
01:09:16,452 --> 01:09:19,720
So, I can say let path equal UIBezierPath.
我让 path 等于 UIBezierpath

1642
01:09:19,789 --> 01:09:21,355
BezierPath knows how do a rect.
因为它知道如何画矩形

1643
01:09:21,424 --> 01:09:23,724
It's this one down here.
就用这里的这个构造器

1644
01:09:23,793 --> 01:09:29,531
The rect is our mouthRect and let's just return that path.
rect 参数就是 mouthRect。最后返回它

1645
01:09:30,700 --> 01:09:32,433
So, now we've got a path for the mouth.
我们得到了嘴巴的路径

1646
01:09:32,501 --> 01:09:34,102
Let's go down here and
我们到下面

1647
01:09:34,170 --> 01:09:38,139
stroke it by saying pathForMouth().stroke().
通过 pathForMouth().stroke() 描线

1648
01:09:38,208 --> 01:09:40,909
Let's see what this looks like.
让我们看看现在是什么样子

1649
01:09:48,851 --> 01:09:49,917
Okay, excellent.
很好

1650
01:09:49,986 --> 01:09:51,352
So, we have a mouth.
我们有了一张嘴

1651
01:09:51,421 --> 01:09:53,721
Kinda looks like a robot face.
看着有点像个机器人

1652
01:09:53,790 --> 01:09:57,024
We want it to have a nice curve, a smile or a frown.
我们希望嘴是一条曲线，开心或不开心

1653
01:09:57,092 --> 01:09:59,527
So, we gotta start thinking a little bit how we're gonna
我们需要稍微考虑一下

1654
01:09:59,596 --> 01:10:03,297
represent whether this is smiling or frowning.
如何表示开不开心

1655
01:10:03,366 --> 01:10:07,669
And so I'm gonna introduce another var, up at the top,
所以我需要在最上面有另一个变量

1656
01:10:07,737 --> 01:10:09,736
here, just like I have it with the eyes are open.
就像 eyesOpen 一样

1657
01:10:09,805 --> 01:10:15,109
I'm gonna have a var which I'm gonna call mouthCurvature and
我把它叫做 mouthCurvature，曲率

1658
01:10:15,178 --> 01:10:17,445
make it be a Double.
是 Double 类型的

1659
01:10:17,513 --> 01:10:21,015
I'll set it to, let's say 1.0 and
我把它设为 1.0

1660
01:10:21,083 --> 01:10:25,553
the semantics of this I'm going to have it be that
我让这个数值意思是

1661
01:10:25,622 --> 01:10:30,491
1.0 is full smile and minus 1.0 is full frown.
1.0 代表最开心，-1.0 最不开心

1662
01:10:30,560 --> 01:10:33,093
And this is going to be public and this is going to be
这个同样是公开的

1663
01:10:33,162 --> 01:10:35,963
the public API that someone uses when they want to use my
如果别人要用，这就是公共接口的一部分

1664
01:10:36,032 --> 01:10:39,299
FaceView to tell me how much this mouth should be smiling.
使用 FaceView 的人可以告诉我嘴应该怎么弯

1665
01:10:39,368 --> 01:10:41,836
Okay, the mouth curvature right here.
好，嘴巴的曲率有了

1666
01:10:41,904 --> 01:10:43,270
And I've just defined it this way.
我这样定义的它

1667
01:10:43,339 --> 01:10:46,073
It's public, I've documented it.
这是公开的，我也写了文档

1668
01:10:46,142 --> 01:10:48,242
And so people can set it to whatever they want.
人们就可以随便设置了

1669
01:10:48,311 --> 01:10:50,043
So I'm going to use this now to do it.
接着我就使用这个变量

1670
01:10:50,112 --> 01:10:52,713
Now one thing is I've defined it as a double because,
注意这里类型是 Double

1671
01:10:52,782 --> 01:10:55,983
you know I'm not actually doing the drawing right now
因为我并没有在绘图

1672
01:10:56,052 --> 01:10:58,152
I'm just talking conceptually what curvature is.
这只是概念上的曲率

1673
01:10:58,221 --> 01:11:01,722
So, I need to convert this in the some meaningful CGFloat,
所以之后我需要转换为 CGFloat

1674
01:11:01,791 --> 01:11:03,824
and then use that to draw this mouth.
再用来绘制嘴部

1675
01:11:03,893 --> 01:11:05,459
So, how am I gonna do that?
怎么做呢？

1676
01:11:05,528 --> 01:11:08,562
The way I'm gonna do that do that is let's get this back up
还是看着界面给你们讲解

1677
01:11:08,631 --> 01:11:12,033
here and I'll show you, on the rectangle that we have here.
我们这里有个矩形

1678
01:11:14,170 --> 01:11:15,803
I'm gonna use what's called a Bezier curve,
然后我要用一条贝塞尔曲线

1679
01:11:15,871 --> 01:11:17,639
how many people know what is Bezier curve is?
有多少人知道贝塞尔曲线是什么？

1680
01:11:18,908 --> 01:11:20,474
Only one person!
只有一个？！

1681
01:11:20,543 --> 01:11:23,777
My Gosh, okay so a Bezier curve is just
好吧，贝塞尔曲线

1682
01:11:23,846 --> 01:11:27,114
two end points a line between two end points but
其实就是两点之间的一条线

1683
01:11:27,183 --> 01:11:30,050
there are two other points called control points.
同时还有另外两个控制点

1684
01:11:30,119 --> 01:11:31,518
And you can kinda think it as,
你可以把它想象成

1685
01:11:31,587 --> 01:11:34,188
think of it as the line starts out at the start,
这条线从起点开始

1686
01:11:34,256 --> 01:11:36,957
starts heading for one of the control points.
朝着第一个控制点走

1687
01:11:37,026 --> 01:11:39,693
As it gets close, it starts heading for the other one.
当快要接近的时候，就朝着另一个控制点走

1688
01:11:39,762 --> 01:11:41,395
And as it gets close to that one, it starts heading for
当快要接近另一个的点的时候，就朝着

1689
01:11:41,464 --> 01:11:42,596
the end, okay.
终点走过去

1690
01:11:42,665 --> 01:11:45,032
So, the control points kind of pull on the line and
所以控制点相当于把线“拉”出来

1691
01:11:45,101 --> 01:11:46,234
give it some curve.
给线一个曲率

1692
01:11:46,302 --> 01:11:48,335
And you can put those control points anywhere you want.
控制点可以随意放置

1693
01:11:48,404 --> 01:11:50,571
Obviously, we're gonna put ours like this.
当然，我们需要这么放

1694
01:11:50,639 --> 01:11:53,774
So, my start is gonna be right here in the middle of this
起点就在左边的中点

1695
01:11:53,843 --> 01:11:56,110
line and my end is gonna be right here.
终点在右边的中点

1696
01:11:56,179 --> 01:11:58,378
So we're gonna draw a line across here.
我们画一条线穿过这里

1697
01:11:58,447 --> 01:12:00,047
And my two control points are going to
我的控制点会在这下面

1698
01:12:00,115 --> 01:12:04,752
be down here somewhere, on both sides of his chin.
某个地方，在下巴的两边

1699
01:12:04,821 --> 01:12:06,087
the line is gonna start here,
这条线会从这里开始，

1700
01:12:06,088 --> 01:12:07,354
start down towards this one.
朝着这个点前进

1701
01:12:07,424 --> 01:12:08,322
Whoop. Starting going to
快到的时候又开始

1702
01:12:08,391 --> 01:12:09,090
the other one.
朝着另一个点

1703
01:12:09,158 --> 01:12:11,192
Whoop. Come back up here. And make a little smile.
最后回到终点，这样就是一个笑脸了

1704
01:12:11,261 --> 01:12:14,228
And if I move my control points up to
如果我把控制点

1705
01:12:14,297 --> 01:12:15,129
the top, then whoop.
移到上面

1706
01:12:15,198 --> 01:12:15,897
It'll be a frown.
那就是不高兴了

1707
01:12:17,700 --> 01:12:19,033
Everyone understand that.
大家都理解

1708
01:12:19,101 --> 01:12:19,967
So I need four points.
所以我需要四个点

1709
01:12:20,036 --> 01:12:21,702
The start, the end, and the two control points.
起点，终点，两个控制点

1710
01:12:21,770 --> 01:12:22,570
Let's do those.
说干就干

1711
01:12:24,507 --> 01:12:25,973
The start is easy,
起点很简单

1712
01:12:26,042 --> 01:12:28,442
that's just the middle of the left edge, okay.
就是左边的中点

1713
01:12:28,510 --> 01:12:31,912
So I can say the start is CGPoint.
所以 start 这个 CGPoint

1714
01:12:31,981 --> 01:12:36,116
And again we'll do this kind of CGPoint.
还是用 CGFloat 构造

1715
01:12:36,185 --> 01:12:41,655
And it's going to be the mouth rect, our little mouth rect,
横坐标是 mouthRect 的

1716
01:12:41,724 --> 01:12:46,193
MinX, that's the left edge, the minimum X, and
minX，最左边最小的 x 坐标值

1717
01:12:46,262 --> 01:12:51,499
mouthRect.midY, that's halfway up the mouth rect.
mouthRect.midY，它中点的纵坐标

1718
01:12:51,567 --> 01:12:55,136
And the end is going to be CGPoint.
终点也是个 CGPoint

1719
01:12:55,205 --> 01:12:56,871
This float.
由 CGFloat 构造

1720
01:12:56,940 --> 01:13:00,575
And this one's gonna be the mouthRect.maxX and
这次取最大值 mouthRect.maxX

1721
01:13:00,643 --> 01:13:03,377
mouthRect.midY on the other side.
因为是在另一边，所以纵坐标不变

1722
01:13:03,446 --> 01:13:04,712
So the two ends, start and end,
两个端点，start 和 end

1723
01:13:04,780 --> 01:13:06,981
are right in the middle of my mouth rect on either side.
是我 mouthRect 左右两边的中点

1724
01:13:07,050 --> 01:13:09,483
So now I need those two control points.
我还需要那两个控制点

1725
01:13:09,552 --> 01:13:12,519
For the control points I need to think of how far down
我需要考虑那两个控制点

1726
01:13:12,588 --> 01:13:13,887
they're going to be.
他们需要向下移多远

1727
01:13:13,956 --> 01:13:16,190
And it depends on the mouth curvature.
这个还取决于嘴的曲率

1728
01:13:16,258 --> 01:13:19,059
The more smile I want, the farther down they need to be.
越开心，这两个点越下面

1729
01:13:19,128 --> 01:13:21,929
The more frown I want, the farther up they need to be.
越伤心，两个点越上面

1730
01:13:21,998 --> 01:13:25,666
So I'm gonna create another thing called smileOffset.
所以我还需要一个 smileOffset

1731
01:13:25,735 --> 01:13:28,703
And this is gonna be a CGFloat, because it's gonna be
一个 CGFloat 类型的变量

1732
01:13:28,771 --> 01:13:32,173
something that I'm using to do drawing here.
因为画图的时候会用到

1733
01:13:32,241 --> 01:13:38,512
And I'm gonna make it equal to the mouthCurvature,
我让它等于 mouthCurvature

1734
01:13:38,581 --> 01:13:44,718
which is a double, times the mouth rect.height.
一个 Double，乘上 mouthRect 的高

1735
01:13:44,787 --> 01:13:47,988
So I will move down those control points all the way
所以我把两个控制点向下移动

1736
01:13:48,057 --> 01:13:51,959
the entire height of a mouth rect if I'm fully smiling.
如果是最开心，移动的就是整个矩形的高度

1737
01:13:52,027 --> 01:13:54,261
Now, there's some problems with this line of code.
但是这行代码还有问题

1738
01:13:54,330 --> 01:13:56,563
One is, if you look at these things right here,
其中一个是，你看这个信息说

1739
01:13:56,632 --> 01:13:59,300
it's saying you can't multiply a Double times a Float.
你不能把 CGFloat 和 Double 相乘

1740
01:13:59,368 --> 01:14:01,536
This is a float, this is a double.
这是个 CGFloat，这是个 Double

1741
01:14:01,604 --> 01:14:04,238
So I'm gonna have to convert this to a float
所以我需要把 Double 转为 CGFloat

1742
01:14:04,306 --> 01:14:07,008
by using a constructor for CGFloat.
通过的是 CGFloat 的构造器

1743
01:14:07,076 --> 01:14:10,077
Luckily, it has one that takes a double okay.
幸运的是，CGFloat 有一个接受 Double 的构造器

1744
01:14:10,146 --> 01:14:13,914
Another thing here is smile offset has to be between,
另外一个是，smileOffset 必须要

1745
01:14:13,983 --> 01:14:15,249
you know, one, or sorry,
啊，不是它

1746
01:14:15,318 --> 01:14:18,485
mouth curvature here has to be between one and minus one.
mouthCurvature 必须要在 0 和 1 之间

1747
01:14:18,554 --> 01:14:20,020
So I'm gonna enforce that.
我要保证它符合条件

1748
01:14:20,089 --> 01:14:22,789
Because I wouldn't want this path curvature to be five, and
因为我不希望 mouthCurvature 被设为 5

1749
01:14:22,858 --> 01:14:23,891
now he's smiling so
然后笑得

1750
01:14:23,960 --> 01:14:26,160
big that it's, you know, on the floor literally.
合不拢嘴

1751
01:14:26,229 --> 01:14:26,960
Jaws on the floor.
下巴都掉到地上了

1752
01:14:27,029 --> 01:14:27,795
We don't want that.
这并不是我们所期望的

1753
01:14:27,863 --> 01:14:29,664
So I'm going to use min and max to do that.
所以我通过 min 和 max 来实现

1754
01:14:29,732 --> 01:14:33,067
I'm gonna say max minus one of min
选择 mouthCurvature 和 1 里小的那个

1755
01:14:33,136 --> 01:14:36,236
of the mouth curvature and one.
然后选择 -1 和结果中更大的那个

1756
01:14:36,305 --> 01:14:38,972
And that's going to restrict it to be between minus one
这就就能把它限制在负一

1757
01:14:39,041 --> 01:14:39,774
and one.
和一之间

1758
01:14:41,310 --> 01:14:42,143
Everybody got that.
相信大家能理解

1759
01:14:42,211 --> 01:14:46,047
I'm just using min and max to do that there.
如何使用 min 和 max 实现

1760
01:14:46,115 --> 01:14:48,549
And notice that it's automatically
注意自动类型推导

1761
01:14:48,618 --> 01:14:50,584
made these be doubles, which is fine.
把这两个判为了 Double，这是没问题的

1762
01:14:50,653 --> 01:14:53,087
So the result of min and max is double, and
因为 min 和 max 的结果都是 Double

1763
01:14:53,156 --> 01:14:54,789
that's being converted to a CGFloat.
然后最后转换成了 CGFloat

1764
01:14:54,857 --> 01:14:55,656
That works fine.
这个就没问题了

1765
01:14:56,859 --> 01:14:58,993
Okay, so now that I have that smile offset,
现在我得到了 smileOffset

1766
01:14:59,061 --> 01:15:00,961
I can say how far down my control points are.
我就能知道控制点应该放多远

1767
01:15:01,030 --> 01:15:04,465
So I'm gonna let cp1, which is control point one, it's gonna
我让 cp1，第一个控制点

1768
01:15:04,533 --> 01:15:08,402
be smile offset times the mouth rect height down.
向下移动间距乘上高度的点

1769
01:15:08,470 --> 01:15:10,871
And I'm gonna make the two control points be
然后我让两个控制点

1770
01:15:10,939 --> 01:15:14,242
one third of the way in from the edges of the mouth rect.
位于矩形三分点的位置

1771
01:15:15,611 --> 01:15:16,977
Does that make sense?
合理吧？

1772
01:15:17,046 --> 01:15:19,513
We wanted to kinda head down, we wanted to kinda
我们的线向下走

1773
01:15:19,582 --> 01:15:21,982
be one-third of the way along from each side.
两边都是在三分点的地方开始转折

1774
01:15:22,051 --> 01:15:23,583
So cp1 is gonna be on the left.
所以 cp1 在左边

1775
01:15:23,652 --> 01:15:27,188
That's gonna be a CGPoint.
cp1 是个 CGPoint

1776
01:15:27,256 --> 01:15:29,189
And this again.
还是用 CGFloat 构造

1777
01:15:29,258 --> 01:15:35,196
And so this one will be the start.x.
横坐标基于 start

1778
01:15:35,265 --> 01:15:37,364
Start is where we're starting right here.
start 就是线的起点

1779
01:15:37,433 --> 01:15:40,434
Plus the mouthRect.width divided by three.
加上矩形宽度的三分之一

1780
01:15:40,503 --> 01:15:42,637
So I'm going a third of the way across.
横着走了三分之一

1781
01:15:42,705 --> 01:15:47,441
And then the y is a start.y plus the smile offset
纵坐标就是起点的纵坐标加上间距

1782
01:15:47,510 --> 01:15:50,211
which could be negative if mouth curvature is negative.
如果曲率是负的，那 smileOffset 也是负的

1783
01:15:50,279 --> 01:15:52,246
Smile offset might be negative, meaning going up.
如果是负数，那最后的结果就是在上面

1784
01:15:52,315 --> 01:15:53,881
And so, this will be a frown.
也就体现出伤心

1785
01:15:53,949 --> 01:15:56,116
Or it could be positive and then it will go down.
如果是正的那就在下面

1786
01:15:56,185 --> 01:15:59,786
Then cp2 is almost exactly the same so I'll copy and
第二个控制点基本一样，我直接复制

1787
01:15:59,855 --> 01:16:01,288
paste it, cp2.
粘贴，改为 cp2

1788
01:16:01,356 --> 01:16:04,858
It's just that here we're gonna go to the end and
只不过横坐标是终点

1789
01:16:04,927 --> 01:16:08,295
move back by mouthRect.width.
向回走三分之一

1790
01:16:08,364 --> 01:16:11,732
But it's still it's at the same level okay because we
纵坐标不变

1791
01:16:11,801 --> 01:16:15,002
want it to come down, go across, and then come back up.
这样就是向下，向右，向上了

1792
01:16:15,070 --> 01:16:16,704
So now that we have these control points and
现在有了控制点

1793
01:16:16,772 --> 01:16:19,973
the start and the end, now we can draw that in the path.
和起点终点，我们就能构成路径了

1794
01:16:20,042 --> 01:16:21,842
So we'll just do go our Bézier path right here.
这是一个贝塞尔曲线

1795
01:16:21,910 --> 01:16:25,479
We'll leave the rect in there at first so we can see it.
我们先把这个矩形留在这里作为参照

1796
01:16:25,548 --> 01:16:31,285
And I'm just gonna tell the path to move to a CGPoint,
最后我只需要 path.move(to:

1797
01:16:31,353 --> 01:16:35,155
which is the start and, actually,
让路径移动到 CGPoint

1798
01:16:35,224 --> 01:16:38,658
you don't even need to do that.
其实不用这样

1799
01:16:38,727 --> 01:16:40,328
You just say, move to the start.
直接移动到 start 就可以了

1800
01:16:41,831 --> 01:16:45,098
And then, we're gonna draw a curve, addCurve,
然后画一个曲线

1801
01:16:45,167 --> 01:16:47,901
which adds one of the Bezier curves.
添加我们的贝塞尔曲线

1802
01:16:47,970 --> 01:16:48,736
And we're going to the end.
一直到 end

1803
01:16:48,805 --> 01:16:54,341
And the control point is cp1, and the other is cp2.
控制点分别是 cp1 和 cp2

1804
01:16:54,409 --> 01:16:54,976
So let's take a look.
让我们看看效果

1805
01:17:04,320 --> 01:17:06,820
Alright, excellent, so we have mouth curvature is 1.0,
很好，现在嘴巴的弧度是 1.0

1806
01:17:06,889 --> 01:17:08,722
we've got a nice big old smile.
非常灿烂的笑容

1807
01:17:08,791 --> 01:17:10,891
Okay, we don't really want this square there anymore,
我们不需要这个矩形了

1808
01:17:10,960 --> 01:17:13,127
rectangle, so we'll get rid of that.
把它去掉，所以

1809
01:17:13,196 --> 01:17:15,763
We can just do that by creating an empty Bezier
改为创建一个空的曲线

1810
01:17:15,831 --> 01:17:16,931
curve to start.
作为初始值

1811
01:17:16,999 --> 01:17:21,502
Also, we want the path's lineWidth to be 5.0.
同时我们把 path.lineWidth 设为 5.0

1812
01:17:21,570 --> 01:17:23,704
One nice, even amount.
这个更合适的线的宽度

1813
01:17:23,773 --> 01:17:25,606
And let's go ahead and check some other things.
我们再测试一下其他的值

1814
01:17:25,675 --> 01:17:28,375
Let's see if the mouth of minus 0.5.
比如 -0.5

1815
01:17:28,444 --> 01:17:31,912
Let's see if that gives us a slight frown.
看看是不是看起来像稍微不开心

1816
01:17:31,981 --> 01:17:33,447
Should give us a slight frown, right.
应该是略微噘嘴的样子

1817
01:17:40,156 --> 01:17:42,690
Neat, okay.
很好，正是如此

1818
01:17:42,759 --> 01:17:45,392
Alright, what's the last thing I'm gonna show.
那最后我要讲什么呢

1819
01:17:45,461 --> 01:17:47,094
One thing that's a little bit of a pain is
有一个麻烦的事就是

1820
01:17:47,162 --> 01:17:49,296
every time I wanna check the mouthCurvature,
每次我要测试 mouthCurvature 的时候

1821
01:17:49,365 --> 01:17:50,698
I gotta go run the app.
我都需要重新运行这个程序

1822
01:17:50,766 --> 01:17:52,299
Back, change it, run.
回来改了之后又要重新开始

1823
01:17:52,368 --> 01:17:53,934
Or every time eyes open, eyes closed.
包括睁眼，闭眼

1824
01:17:54,002 --> 01:17:56,204
Back and forth. Wouldn't it be cool, if I could 
这样来回切换。如果我能够直接在

1825
01:17:56,205 --> 01:18:00,007
just see these things in Interface Builder, okay?
Interface Builder 里看到这些该多好

1826
01:18:00,076 --> 01:18:01,141
I can see a button
比如我可以看到一个按钮长什么样子

1827
01:18:01,210 --> 01:18:02,976
when I change it's things in Interface Builder.
修改都在 Interface Builder 里显示出来了

1828
01:18:03,045 --> 01:18:06,013
And wouldn't it even be cooler if I could have an inspector
更好的是如果我能够有个检查器

1829
01:18:06,081 --> 01:18:06,947
in Interface Builder,
在 Interface Builder 里

1830
01:18:07,016 --> 01:18:09,382
that would let me inspect these things.
用来设置我的这些东西

1831
01:18:09,451 --> 01:18:10,584
Well, of course we can do that.
当然这是可以实现的

1832
01:18:10,653 --> 01:18:12,753
How do we do that?
怎么做呢？

1833
01:18:12,821 --> 01:18:16,357
We go up here, and we just make this IBDesignable, okay.
我们只需要在上面标记为 @IBDesignable

1834
01:18:17,793 --> 01:18:21,428
If you put IBDesignable in front of a UIView at the top,
如果你把  @IBDesignable 标记在 UIView 前面

1835
01:18:21,497 --> 01:18:26,400
then when you go over to your storyboard, at the top, you're
当你进入 Storyboard 的时候

1836
01:18:26,469 --> 01:18:29,703
gonna see it here, compiling that code, integrating it into
你会看到 Xcode 编译这些代码

1837
01:18:29,772 --> 01:18:32,639
Interface Builder, and showing it to you.
整合并显示到 Interface 里

1838
01:18:32,708 --> 01:18:35,809
Okay now unfortunately we don't have an inspector here
但我们还没有一个检查器

1839
01:18:35,878 --> 01:18:37,778
that allows us to inspect those things.
来让我们更改属性

1840
01:18:37,847 --> 01:18:39,346
But we can do that as well.
但我们马上就做

1841
01:18:39,415 --> 01:18:40,514
Go back to FaceView here.
回到 FaceView

1842
01:18:40,583 --> 01:18:41,715
And I'm going to say for
我们把

1843
01:18:41,784 --> 01:18:45,352
example make the scale IBInspectable.
比如 scale 是 @IBInspectable 的

1844
01:18:46,922 --> 01:18:51,525
Let's make eyesOpen IBInspectable.
把 eyesOpen 标为 @IBInspectable

1845
01:18:51,593 --> 01:18:56,030
Let's make the mouthCurvature IBInspectable.
把 mouthCurvature 标为 @IBInspectable

1846
01:18:56,098 --> 01:18:57,831
Let's add a few other things here.
我们再在这里加几个

1847
01:18:57,900 --> 01:19:00,601
Let's make the lineWidth IBInspectable.
比如让 lineWidth @IBInspectable

1848
01:19:00,669 --> 01:19:03,703
So to do that, we can't have this 5.0 going on over here,
也就是不用这里这个 5.0 了

1849
01:19:03,772 --> 01:19:05,572
we're gonna have to add a var.
我们添加一个 var 变量

1850
01:19:05,641 --> 01:19:10,677
So we're just gonna add an IBInspectable var.
标有 @IBInspectable 的 var

1851
01:19:10,746 --> 01:19:13,513
Which is gonna be the line width, which is a CGFloat.
是一个叫做 lineWidth 的 CGFloat

1852
01:19:13,582 --> 01:19:17,784
We'll start it out at 5.0 but we'll be able to change it.
初始值为 5.0，但我们之后可以改

1853
01:19:17,853 --> 01:19:20,420
So now we can go everywhere where we have that 5.0.
我们现在把所有用到那个 5.0 的地方

1854
01:19:20,489 --> 01:19:23,557
We'll just change it to use this var.
都替换为这个变量

1855
01:19:25,594 --> 01:19:27,728
We can also do the color.
我们还可以这么处理颜色

1856
01:19:27,796 --> 01:19:32,065
IBInspectable var the color, it's a UIColor.
定义类型为 UIColor 的 @IBInspectable 变量 color

1857
01:19:32,134 --> 01:19:36,003
Okay, we'll start it out as blue like it is now.
初始值还是和现在一样是蓝色

1858
01:19:36,071 --> 01:19:37,771
So where we have UIColor.blue,
现在所有用 UIColor.blue 的地方

1859
01:19:37,840 --> 01:19:39,539
we'll use this var instead.
都改为使用这个变量

1860
01:19:39,608 --> 01:19:40,741
Alright, we have UIColor.blue
这里有个 UIColor.blue

1861
01:19:40,809 --> 01:19:44,911
I'm just gonna say color, to set the color.
我直接用 color 代替为设定的颜色

1862
01:19:44,980 --> 01:19:47,847
Okay, so basically it's taking all the things in my app and
我们基本把所有程序里的东西都公开

1863
01:19:47,916 --> 01:19:50,383
just making them not only configurable,
不仅可以作为公开变量赋值

1864
01:19:50,452 --> 01:19:53,653
as public variables, but also inspectable.
还可以用检查器从 Interface Builder 观察

1865
01:19:53,722 --> 01:19:56,089
So let's go back to our story board and see if this works.
我们回到 Storyboard 看看能不能用了

1866
01:19:56,158 --> 01:19:58,191
Sure enough, right away, you see up at the top there,
是的，马上就出现在这上面了

1867
01:19:58,260 --> 01:20:02,696
Face View, the scale, whether the eyes are open, line width,
Face View 可以设置 scale，是否睁眼，线宽

1868
01:20:02,765 --> 01:20:05,132
the color, mouth curvature, are now inspectable.
颜色，嘴巴曲率，这些都可以观察

1869
01:20:05,201 --> 01:20:07,901
So let's close the eyes.
我们让他闭眼

1870
01:20:07,970 --> 01:20:12,606
Let's have the mouth curvature be 0.5.
mouthCurvature shew 0.5

1871
01:20:12,675 --> 01:20:16,176
Let's make the color be orange.
颜色改为橙色

1872
01:20:16,244 --> 01:20:18,712
Let's make the line width be two.
线条宽度设为二

1873
01:20:18,781 --> 01:20:22,115
Let's make the scale be 0.5.
把缩放设为 0.5

1874
01:20:22,184 --> 01:20:26,252
Make the scale be 0.9 again, whatever.
再试试缩放为 0.9

1875
01:20:26,321 --> 01:20:29,422
Now another interesting thing about this is just like if you
很有趣的一点是

1876
01:20:29,491 --> 01:20:31,458
were inspecting a UIButton here.
就像观察 UIButton 一样

1877
01:20:31,527 --> 01:20:34,194
When you run it's going to use
运行的时候会使用

1878
01:20:34,263 --> 01:20:36,664
these settings as the initial settings.
IB 里这些设置作为初始值

1879
01:20:37,667 --> 01:20:39,299
You truly are editing this,
所以这样设置

1880
01:20:39,368 --> 01:20:41,167
just like you would edit anything else,
和更改其他的控件是一样的

1881
01:20:41,236 --> 01:20:43,771
any other custom view, see it comes up like this.
和其他的自定义视图一样。看吧

1882
01:20:45,941 --> 01:20:46,673
Got it?
理解了吗？

1883
01:20:46,742 --> 01:20:49,242
Now one thing that you have to do when you have
你有一件必须要做的事情

1884
01:20:49,311 --> 01:20:54,414
an IBInspectable is you have to explicitly type you cannot
@IBInspectable 变量都是要明确声明类型的

1885
01:20:54,483 --> 01:20:55,816
let Swift infer it.
不能让 Swift 推测

1886
01:20:55,884 --> 01:20:59,386
Because while Swift can infer, Interface builder cannot.
因为虽然 Swift 可以推导出类型，但 IB 不行

1887
01:21:00,956 --> 01:21:03,023
It doesn't have an inference engine there.
它没有一个类型推导引擎

1888
01:21:03,091 --> 01:21:05,925
So always make sure you put the actual type
所以记住把实际的类型

1889
01:21:05,994 --> 01:21:10,029
in all the IBInspectables.
声明给 @IBInspectable 的变量

1890
01:21:10,098 --> 01:21:11,965
Alright, that's it! Next time,
这就是所有的内容了

1891
01:21:12,034 --> 01:21:13,367
what we're gonna do is we're gonna 
剩下的就是我们要

1892
01:21:13,368 --> 01:21:14,701
add a model to our MVC.
加一个模型（Model）到 MVC 里

1893
01:21:14,770 --> 01:21:16,770
And we're gonna start putting some gestures in here.
并且开始识别手势

1894
01:21:16,839 --> 01:21:20,707
And then we'll start talking about multiple MVCs.
再之后我们会讲多个 MVC

1895
01:21:20,776 --> 01:21:31,384
>> For more, please visit us at stanford.edu.
>> 更多课程详见 stanford.edu
